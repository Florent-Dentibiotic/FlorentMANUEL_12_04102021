{"ast":null,"code":"var _jsxFileName = \"/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/services/UserService.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport UserMapper from '../mapper/UserMapper';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useFetch(userId) {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [user, setData] = useState([]); // Remarque : le tableau vide de dépendances [] indique\n  // que useEffect ne s’exécutera qu’une fois, un peu comme\n  // componentDidMount()\n\n  useEffect(() => {\n    fetch(`http://localhost:3000/user/${userId}`).then(res => res.json()).then(data => {\n      setIsLoaded(true);\n      console.log(data);\n      setData(UserMapper.convertToUser(data));\n    }, // Remarque : il faut gérer les erreurs ici plutôt que dans\n    // un bloc catch() afin que nous n’avalions pas les exceptions\n    // dues à de véritables bugs dans les composants.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, [userId]);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Erreur\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 16\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Chargement...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 16\n    }, this);\n  } else {\n    return {\n      user,\n      isLoaded,\n      error\n    };\n  }\n}\n\n_s(useFetch, \"egw5tFeYLfMK2JpOZyCXrJ/LY/I=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/services/UserService.js"],"names":["React","UserMapper","useState","useEffect","useFetch","userId","error","setError","isLoaded","setIsLoaded","user","setData","fetch","then","res","json","data","console","log","convertToUser"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,SAASC,QAAT,CAAkBC,MAAlB,EAA0B;AAAA;;AACtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC,CAHsB,CAKtB;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,KAAK,CAAE,8BAA6BP,MAAO,EAAtC,CAAL,CACKQ,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADnB,EAEKF,IAFL,CAGSG,IAAD,IAAU;AACNP,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAL,MAAAA,OAAO,CAACV,UAAU,CAACkB,aAAX,CAAyBH,IAAzB,CAAD,CAAP;AACH,KAPT,EAQQ;AACA;AACA;AACCV,IAAAA,KAAD,IAAW;AACPG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,KAdT;AAgBH,GAjBQ,EAiBN,CAACD,MAAD,CAjBM,CAAT;;AAmBA,MAAIC,KAAJ,EAAW;AACP,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD,MAEO,IAAI,CAACE,QAAL,EAAe;AAClB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFM,MAEA;AACH,WAAO;AAAEE,MAAAA,IAAF;AAAQF,MAAAA,QAAR;AAAkBF,MAAAA;AAAlB,KAAP;AACH;AACJ;;GAlCQF,Q;;AAoCT,eAAeA,QAAf","sourcesContent":["import React from 'react'\nimport UserMapper from '../mapper/UserMapper'\nimport { useState, useEffect } from 'react'\n\nfunction useFetch(userId) {\n    const [error, setError] = useState(null)\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [user, setData] = useState([])\n\n    // Remarque : le tableau vide de dépendances [] indique\n    // que useEffect ne s’exécutera qu’une fois, un peu comme\n    // componentDidMount()\n    useEffect(() => {\n        fetch(`http://localhost:3000/user/${userId}`)\n            .then((res) => res.json())\n            .then(\n                (data) => {\n                    setIsLoaded(true)\n                    console.log(data)\n                    setData(UserMapper.convertToUser(data))\n                },\n                // Remarque : il faut gérer les erreurs ici plutôt que dans\n                // un bloc catch() afin que nous n’avalions pas les exceptions\n                // dues à de véritables bugs dans les composants.\n                (error) => {\n                    setIsLoaded(true)\n                    setError(error)\n                }\n            )\n    }, [userId])\n\n    if (error) {\n        return <div>Erreur</div>\n    } else if (!isLoaded) {\n        return <div>Chargement...</div>\n    } else {\n        return { user, isLoaded, error }\n    }\n}\n\nexport default useFetch\n"]},"metadata":{},"sourceType":"module"}