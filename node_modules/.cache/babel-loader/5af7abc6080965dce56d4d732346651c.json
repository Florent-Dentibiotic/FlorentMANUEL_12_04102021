{"ast":null,"code":"var _jsxFileName = \"/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/services/UserService.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport UserMapper from '../mapper/UserMapper';\nimport { useState, useEffect } from 'react'; // export default class UserService extends React.Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             url: props.url,\n//         }\n//     }\n//     async logUser() {\n//         const user = await fetch(this.url)\n//             .then((response) => response.json())\n//             .then((data) => UserMapper.convertToUser(data))\n//         return user\n//     }\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UserService(url) {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]); // Remarque : le tableau vide de dépendances [] indique\n  // que useEffect ne s’exécutera qu’une fois, un peu comme\n  // componentDidMount()\n\n  useEffect(() => {\n    fetch(url).then(res => res.json()).then(data => {\n      setIsLoaded(true);\n      setItems(UserMapper.convertToUser(data));\n    }, // Remarque : il faut gérer les erreurs ici plutôt que dans\n    // un bloc catch() afin que nous n’avalions pas les exceptions\n    // dues à de véritables bugs dans les composants.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Erreur : \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 16\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Chargement...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 16\n    }, this);\n  } else {\n    return console.log(items);\n  }\n}\n\n_s(UserService, \"m9AscAN57M/MODoTwSsNC5AuztA=\");\n\n_c = UserService;\nexport default UserService;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserService\");","map":{"version":3,"sources":["/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/services/UserService.js"],"names":["React","UserMapper","useState","useEffect","UserService","url","error","setError","isLoaded","setIsLoaded","items","setItems","fetch","then","res","json","data","convertToUser","message","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,SAASC,WAAT,CAAqBC,GAArB,EAA0B;AAAA;;AACtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC,CAHsB,CAKtB;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,KAAK,CAACP,GAAD,CAAL,CACKQ,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADnB,EAEKF,IAFL,CAGSG,IAAD,IAAU;AACNP,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,QAAQ,CAACV,UAAU,CAACgB,aAAX,CAAyBD,IAAzB,CAAD,CAAR;AACH,KANT,EAOQ;AACA;AACA;AACCV,IAAAA,KAAD,IAAW;AACPG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,KAbT;AAeH,GAhBQ,EAgBN,EAhBM,CAAT;;AAkBA,MAAIA,KAAJ,EAAW;AACP,wBAAO;AAAA,8BAAeA,KAAK,CAACY,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD,MAEO,IAAI,CAACV,QAAL,EAAe;AAClB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFM,MAEA;AACH,WAAOW,OAAO,CAACC,GAAR,CAAYV,KAAZ,CAAP;AACH;AACJ;;GAjCQN,W;;KAAAA,W;AAmCT,eAAeA,WAAf","sourcesContent":["import React from 'react'\nimport UserMapper from '../mapper/UserMapper'\nimport { useState, useEffect } from 'react'\n\n// export default class UserService extends React.Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             url: props.url,\n//         }\n//     }\n\n//     async logUser() {\n//         const user = await fetch(this.url)\n//             .then((response) => response.json())\n//             .then((data) => UserMapper.convertToUser(data))\n//         return user\n//     }\n// }\n\nfunction UserService(url) {\n    const [error, setError] = useState(null)\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [items, setItems] = useState([])\n\n    // Remarque : le tableau vide de dépendances [] indique\n    // que useEffect ne s’exécutera qu’une fois, un peu comme\n    // componentDidMount()\n    useEffect(() => {\n        fetch(url)\n            .then((res) => res.json())\n            .then(\n                (data) => {\n                    setIsLoaded(true)\n                    setItems(UserMapper.convertToUser(data))\n                },\n                // Remarque : il faut gérer les erreurs ici plutôt que dans\n                // un bloc catch() afin que nous n’avalions pas les exceptions\n                // dues à de véritables bugs dans les composants.\n                (error) => {\n                    setIsLoaded(true)\n                    setError(error)\n                }\n            )\n    }, [])\n\n    if (error) {\n        return <div>Erreur : {error.message}</div>\n    } else if (!isLoaded) {\n        return <div>Chargement...</div>\n    } else {\n        return console.log(items)\n    }\n}\n\nexport default UserService\n"]},"metadata":{},"sourceType":"module"}