{"ast":null,"code":"var _jsxFileName = \"/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/pages/UserInterface.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport AsideNav from '../components/AsideNav';\nimport Header from '../components/Header';\nimport '../index.css'; // import Weight from '../components/Weight'\n// import KeyData from '../components/KeyData'\n// import SessionDuration from '../components/SessionDuration'\n// import Score from '../components/Score'\n// import Radar from '../components/Radar'\n\nimport UserService from '../services/UserService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction UserInterface(props) {\n  _s();\n\n  // const [userData, setUserData] = useState({})\n  // const [activitiesData, setActivitiesData] = useState({})\n  // const [sessionData, setSessionData] = useState({})\n  // const [performanceData, setPerformanceData] = useState({})\n  // const [isDataLoading, setDataLoading] = useState(true)\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    async function fetchActivities() {\n      setDataLoading(true);\n\n      try {\n        ;\n\n        /*#__PURE__*/\n        _jsxDEV(UserService, {\n          url: `http://localhost:3000/user/${props.match.params.userId.slice(-2)}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 18\n        }, this); // const user = await UserService.logUser()\n        // console.log(user)\n\n\n        const response = await fetch(`http://localhost:3000/user/${props.match.params.userId.slice(-2)}`);\n        const {\n          data\n        } = await response.json();\n        setUserData(data);\n        const activitiesResponse = await fetch(`http://localhost:3000/user/${props.match.params.userId.slice(-2)}/activity`);\n        const activitiesData = await activitiesResponse.json();\n        setActivitiesData(activitiesData.data);\n        const sessionResponse = await fetch(`http://localhost:3000/user/${props.match.params.userId.slice(-2)}/average-sessions`);\n        const sessionData = await sessionResponse.json();\n        setSessionData(sessionData.data);\n        const performanceResponse = await fetch(`http://localhost:3000/user/${props.match.params.userId.slice(-2)}/performance`);\n        const performanceData = await performanceResponse.json();\n        setPerformanceData(performanceData.data);\n      } catch (err) {\n        console.log('===== error =====', err);\n        setError(true);\n      } finally {\n        setDataLoading(false);\n      }\n    }\n\n    fetchActivities();\n  }, [props.match.params.userId]);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Oups il y a eu un probl\\xE8me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"flex h-screen\",\n      children: /*#__PURE__*/_jsxDEV(AsideNav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(UserInterface, \"81Vxn8UbQaNZ3gmrqNNQnaEoNrE=\");\n\n_c = UserInterface;\nexport default UserInterface;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserInterface\");","map":{"version":3,"sources":["/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/pages/UserInterface.jsx"],"names":["useState","useEffect","AsideNav","Header","UserService","UserInterface","props","error","setError","fetchActivities","setDataLoading","match","params","userId","slice","response","fetch","data","json","setUserData","activitiesResponse","activitiesData","setActivitiesData","sessionResponse","sessionData","setSessionData","performanceResponse","performanceData","setPerformanceData","err","console","log"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport AsideNav from '../components/AsideNav'\nimport Header from '../components/Header'\nimport '../index.css'\n// import Weight from '../components/Weight'\n// import KeyData from '../components/KeyData'\n// import SessionDuration from '../components/SessionDuration'\n// import Score from '../components/Score'\n// import Radar from '../components/Radar'\nimport UserService from '../services/UserService'\n\nfunction UserInterface(props) {\n    // const [userData, setUserData] = useState({})\n    // const [activitiesData, setActivitiesData] = useState({})\n    // const [sessionData, setSessionData] = useState({})\n    // const [performanceData, setPerformanceData] = useState({})\n    // const [isDataLoading, setDataLoading] = useState(true)\n    const [error, setError] = useState(false)\n\n    useEffect(() => {\n        async function fetchActivities() {\n            setDataLoading(true)\n            try {\n                ;<UserService\n                    url={`http://localhost:3000/user/${props.match.params.userId.slice(\n                        -2\n                    )}`}\n                />\n                // const user = await UserService.logUser()\n                // console.log(user)\n                const response = await fetch(\n                    `http://localhost:3000/user/${props.match.params.userId.slice(\n                        -2\n                    )}`\n                )\n                const { data } = await response.json()\n                setUserData(data)\n\n                const activitiesResponse = await fetch(\n                    `http://localhost:3000/user/${props.match.params.userId.slice(\n                        -2\n                    )}/activity`\n                )\n                const activitiesData = await activitiesResponse.json()\n                setActivitiesData(activitiesData.data)\n\n                const sessionResponse = await fetch(\n                    `http://localhost:3000/user/${props.match.params.userId.slice(\n                        -2\n                    )}/average-sessions`\n                )\n                const sessionData = await sessionResponse.json()\n                setSessionData(sessionData.data)\n\n                const performanceResponse = await fetch(\n                    `http://localhost:3000/user/${props.match.params.userId.slice(\n                        -2\n                    )}/performance`\n                )\n                const performanceData = await performanceResponse.json()\n                setPerformanceData(performanceData.data)\n            } catch (err) {\n                console.log('===== error =====', err)\n                setError(true)\n            } finally {\n                setDataLoading(false)\n            }\n        }\n        fetchActivities()\n    }, [props.match.params.userId])\n\n    if (error) {\n        return <span>Oups il y a eu un probl√®me</span>\n    }\n\n    return (\n        <>\n            <Header />\n            <main className=\"flex h-screen\">\n                <AsideNav />\n                {/* <div className=\"w-full h-full px-28 py-8\">\n                    <div>\n                        <h1 className=\"text-5xl mb-5\">\n                            Bonjour{' '}\n                            <span className=\"text-red-600\">\n                                {isDataLoading ? (\n                                    <p>I'm Loading</p>\n                                ) : (\n                                    userData.userInfos.firstName\n                                )}\n                            </span>\n                        </h1>\n                        <h2 className=\"mb-5\">\n                            F√©licitation ! Vous avez explos√© vos objectifs hier\n                            üëè\n                        </h2>\n                    </div>\n                    <div className=\"grid grid-cols-4 gap-3 h-5/6\">\n                        {isDataLoading ? (\n                            <p>I'm Loading</p>\n                        ) : (\n                            <Weight activitiesData={activitiesData.sessions} />\n                        )}\n                        <div className=\"rounded-md row-span-2 grid grid-row-4 gap-3\">\n                            {isDataLoading ? (\n                                <p>I'm Loading</p>\n                            ) : (\n                                <KeyData userKeyData={userData.keyData} />\n                            )}\n                        </div>\n                        {isDataLoading ? (\n                            <p>I'm Loading</p>\n                        ) : (\n                            <SessionDuration\n                                sessionData={sessionData.sessions}\n                            />\n                        )}\n                        {isDataLoading ? (\n                            <p>I'm Loading</p>\n                        ) : (\n                            <Radar radarData={performanceData} />\n                        )}\n\n                        {isDataLoading ? (\n                            <p>I'm Loading</p>\n                        ) : (\n                            <Score userScore={userData.todayScore} />\n                        )}\n                    </div>\n                </div> */}\n            </main>\n        </>\n    )\n}\n\nexport default UserInterface\n"]},"metadata":{},"sourceType":"module"}