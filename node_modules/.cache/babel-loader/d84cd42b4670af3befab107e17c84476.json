{"ast":null,"code":"var _jsxFileName = \"/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/services/UserService.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react'; //import UserMapper from '../mapper/UserMapper'\n\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useFetch(url) {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [data, setData] = useState([]); // Remarque : le tableau vide de dépendances [] indique\n  // que useEffect ne s’exécutera qu’une fois, un peu comme\n  // componentDidMount()\n\n  useEffect(() => {\n    fetch(url).then(res => res.json()).then(data => {\n      setIsLoaded(true);\n      setData(data);\n    }, // Remarque : il faut gérer les erreurs ici plutôt que dans\n    // un bloc catch() afin que nous n’avalions pas les exceptions\n    // dues à de véritables bugs dans les composants.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, [url]);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Erreur\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 16\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Chargement...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, this);\n  } else {\n    return {\n      data,\n      isLoaded,\n      error\n    };\n  }\n}\n\n_s(useFetch, \"FZxwUA4xt5+cidrm7Dl+G5KOk6M=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/services/UserService.js"],"names":["React","useState","useEffect","useFetch","url","error","setError","isLoaded","setIsLoaded","data","setData","fetch","then","res","json"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AAAA;;AACnB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC,CAHmB,CAKnB;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,KAAK,CAACP,GAAD,CAAL,CACKQ,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADnB,EAEKF,IAFL,CAGSH,IAAD,IAAU;AACND,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,OAAO,CAACD,IAAD,CAAP;AACH,KANT,EAOQ;AACA;AACA;AACCJ,IAAAA,KAAD,IAAW;AACPG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,KAbT;AAeH,GAhBQ,EAgBN,CAACD,GAAD,CAhBM,CAAT;;AAkBA,MAAIC,KAAJ,EAAW;AACP,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD,MAEO,IAAI,CAACE,QAAL,EAAe;AAClB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFM,MAEA;AACH,WAAO;AAAEE,MAAAA,IAAF;AAAQF,MAAAA,QAAR;AAAkBF,MAAAA;AAAlB,KAAP;AACH;AACJ;;GAjCQF,Q;;AAmCT,eAAeA,QAAf","sourcesContent":["import React from 'react'\n//import UserMapper from '../mapper/UserMapper'\nimport { useState, useEffect } from 'react'\n\nfunction useFetch(url) {\n    const [error, setError] = useState(null)\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [data, setData] = useState([])\n\n    // Remarque : le tableau vide de dépendances [] indique\n    // que useEffect ne s’exécutera qu’une fois, un peu comme\n    // componentDidMount()\n    useEffect(() => {\n        fetch(url)\n            .then((res) => res.json())\n            .then(\n                (data) => {\n                    setIsLoaded(true)\n                    setData(data)\n                },\n                // Remarque : il faut gérer les erreurs ici plutôt que dans\n                // un bloc catch() afin que nous n’avalions pas les exceptions\n                // dues à de véritables bugs dans les composants.\n                (error) => {\n                    setIsLoaded(true)\n                    setError(error)\n                }\n            )\n    }, [url])\n\n    if (error) {\n        return <div>Erreur</div>\n    } else if (!isLoaded) {\n        return <div>Chargement...</div>\n    } else {\n        return { data, isLoaded, error }\n    }\n}\n\nexport default useFetch\n"]},"metadata":{},"sourceType":"module"}