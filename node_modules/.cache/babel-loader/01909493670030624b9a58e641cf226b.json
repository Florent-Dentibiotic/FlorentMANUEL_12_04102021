{"ast":null,"code":"var _jsxFileName = \"/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/RadarChart.jsx\",\n    _s = $RefreshSig$();\n\nimport { useParams } from 'react-router';\nimport useFetchPerf from '../services/PerformanceService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RadarChart(userPerformanceData) {\n  _s();\n\n  //const [SvgRadar, setSvgWeight] = useState()\n  const {\n    userId\n  } = useParams();\n  const {\n    performanceData,\n    performanceLoaded\n  } = useFetchPerf(userId.slice(-2)); // useEffect(() => {\n  //     const SvgWeightCreation = () => {\n  //         const cardio = userPerformanceData.userPerformanceData.cardio\n  //         const energy = userPerformanceData.userPerformanceData.energy\n  //         const endurance = userPerformanceData.userPerformanceData.endurance\n  //         const strength = userPerformanceData.userPerformanceData.strength\n  //         const speed = userPerformanceData.userPerformanceData.speed\n  //         const intensity = userPerformanceData.userPerformanceData.intensity\n  //         const maxValue = [\n  //             cardio,\n  //             energy,\n  //             endurance,\n  //             strength,\n  //             speed,\n  //             intensity,\n  //         ].sort(function (a, b) {\n  //             return b - a\n  //         })\n  //         function resizeValue(size) {\n  //             return (85 * size) / (maxValue[0] + 10)\n  //         }\n  //         const cardioCoord = {\n  //             axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(cardio),\n  //             axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(cardio),\n  //         }\n  //         const energyCoord = {\n  //             axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(energy),\n  //             axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(energy),\n  //         }\n  //         const enduranceCoord = {\n  //             axeX: 125,\n  //             axeY: 130 + resizeValue(endurance),\n  //         }\n  //         const strengthCoord = {\n  //             axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(strength),\n  //             axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(strength),\n  //         }\n  //         const speedCoord = {\n  //             axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(speed),\n  //             axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(speed),\n  //         }\n  //         const intensityCoord = {\n  //             axeX: 125,\n  //             axeY: 130 - resizeValue(intensity),\n  //         }\n  //         function newHexagon(size) {\n  //             return `M125 ${130 - size}, ${\n  //                 125 + Math.sin(Math.PI / 3) * size\n  //             } ${130 - Math.cos(Math.PI / 3) * size}, ${\n  //                 125 + Math.sin(Math.PI / 3) * size\n  //             } ${130 + Math.cos(Math.PI / 3) * size}, 125 ${130 + size}, ${\n  //                 125 - Math.sin(Math.PI / 3) * size\n  //             } ${130 + Math.cos(Math.PI / 3) * size}, ${\n  //                 125 - Math.sin(Math.PI / 3) * size\n  //             } ${130 - Math.cos(Math.PI / 3) * size}, 125 ${130 - size}`\n  //         }\n  //         const dPath = `M${intensityCoord.axeX} ${intensityCoord.axeY}, ${speedCoord.axeX} ${speedCoord.axeY}, ${strengthCoord.axeX} ${strengthCoord.axeY}, ${enduranceCoord.axeX} ${enduranceCoord.axeY},${energyCoord.axeX} ${energyCoord.axeY}, ${cardioCoord.axeX} ${cardioCoord.axeY}Z`\n  //         const svg = d3\n  //             .select('.radar-box')\n  //             .attr('width', 250)\n  //             .attr('height', 250)\n  //             .style('background', '#000')\n  //             .style('border-radius', '5px')\n  //         svg.append('g')\n  //             .append('path')\n  //             .attr('fill', 'none')\n  //             .attr('stroke', '#fff')\n  //             .attr('d', newHexagon(85))\n  //         svg.append('g')\n  //             .append('path')\n  //             .attr('fill', 'none')\n  //             .attr('stroke', '#fff')\n  //             .attr('d', newHexagon(65))\n  //         svg.append('g')\n  //             .append('path')\n  //             .attr('fill', 'none')\n  //             .attr('stroke', '#fff')\n  //             .attr('d', newHexagon(45))\n  //         svg.append('g')\n  //             .append('path')\n  //             .attr('fill', 'none')\n  //             .attr('stroke', '#fff')\n  //             .attr('d', newHexagon(25))\n  //         svg.append('g')\n  //             .append('path')\n  //             .attr('fill', 'none')\n  //             .attr('stroke', '#fff')\n  //             .attr('d', newHexagon(12))\n  //         svg.append('g')\n  //             .append('path')\n  //             .attr('fill', '#FF0101')\n  //             .attr('d', newHexagon(0))\n  //             .transition()\n  //             .duration(600)\n  //             .attr('d', dPath)\n  //             .attr('class', 'opacity-70')\n  //     }\n  //     setSvgWeight(SvgWeightCreation)\n  // }, [\n  //     SvgRadar,\n  //     userPerformanceData.userPerformanceData.cardio,\n  //     userPerformanceData.userPerformanceData.endurance,\n  //     userPerformanceData.userPerformanceData.energy,\n  //     userPerformanceData.userPerformanceData.intensity,\n  //     userPerformanceData.userPerformanceData.speed,\n  //     userPerformanceData.userPerformanceData.strength,\n  // ])\n\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    className: \"radar-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"text\", {\n      x: \"100\",\n      y: \"30\",\n      fill: \"#fff\",\n      fontSize: \"12\",\n      children: \"Intensit\\xE9\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: \"210\",\n      y: \"90\",\n      fill: \"#fff\",\n      fontSize: \"12\",\n      children: \"Vitesse\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: \"210\",\n      y: \"170\",\n      fill: \"#fff\",\n      fontSize: \"12\",\n      children: \"Force\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: \"100\",\n      y: \"230\",\n      fill: \"#fff\",\n      fontSize: \"12\",\n      children: \"Endurance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: \"5\",\n      y: \"170\",\n      fill: \"#fff\",\n      fontSize: \"12\",\n      children: \"Energie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: \"5\",\n      y: \"90\",\n      fill: \"#fff\",\n      fontSize: \"12\",\n      children: \"Cardio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RadarChart, \"KOZCR0FlvBElR/YOUY6sQ63O8IU=\", false, function () {\n  return [useParams, useFetchPerf];\n});\n\n_c = RadarChart;\nexport default RadarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"RadarChart\");","map":{"version":3,"sources":["/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/RadarChart.jsx"],"names":["useParams","useFetchPerf","RadarChart","userPerformanceData","userId","performanceData","performanceLoaded","slice"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,cAA1B;AACA,OAAOC,YAAP,MAAyB,gCAAzB;;;AAEA,SAASC,UAAT,CAAoBC,mBAApB,EAAyC;AAAA;;AACrC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAaJ,SAAS,EAA5B;AACA,QAAM;AAAEK,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAyCL,YAAY,CACvDG,MAAM,CAACG,KAAP,CAAa,CAAC,CAAd,CADuD,CAA3D,CAHqC,CAOrsBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACI;AAAM,MAAA,CAAC,EAAC,KAAR;AAAc,MAAA,CAAC,EAAC,IAAhB;AAAqB,MAAA,IAAI,EAAC,MAA1B;AAAiC,MAAA,QAAQ,EAAC,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAM,MAAA,CAAC,EAAC,KAAR;AAAc,MAAA,CAAC,EAAC,IAAhB;AAAqB,MAAA,IAAI,EAAC,MAA1B;AAAiC,MAAA,QAAQ,EAAC,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAOI;AAAM,MAAA,CAAC,EAAC,KAAR;AAAc,MAAA,CAAC,EAAC,KAAhB;AAAsB,MAAA,IAAI,EAAC,MAA3B;AAAkC,MAAA,QAAQ,EAAC,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,eAUI;AAAM,MAAA,CAAC,EAAC,KAAR;AAAc,MAAA,CAAC,EAAC,KAAhB;AAAsB,MAAA,IAAI,EAAC,MAA3B;AAAkC,MAAA,QAAQ,EAAC,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ,eAaI;AAAM,MAAA,CAAC,EAAC,GAAR;AAAY,MAAA,CAAC,EAAC,KAAd;AAAoB,MAAA,IAAI,EAAC,MAAzB;AAAgC,MAAA,QAAQ,EAAC,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbJ,eAgBI;AAAM,MAAA,CAAC,EAAC,GAAR;AAAY,MAAA,CAAC,EAAC,IAAd;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,QAAQ,EAAC,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH;;GAtJQL,U;UAEcF,S,EAC4BC,Y;;;KAH1CC,U;AAwJT,eAAeA,UAAf","sourcesContent":["import { useParams } from 'react-router'\nimport useFetchPerf from '../services/PerformanceService'\n\nfunction RadarChart(userPerformanceData) {\n    //const [SvgRadar, setSvgWeight] = useState()\n    const { userId } = useParams()\n    const { performanceData, performanceLoaded } = useFetchPerf(\n        userId.slice(-2)\n    )\n\n    // useEffect(() => {\n    //     const SvgWeightCreation = () => {\n    //         const cardio = userPerformanceData.userPerformanceData.cardio\n    //         const energy = userPerformanceData.userPerformanceData.energy\n    //         const endurance = userPerformanceData.userPerformanceData.endurance\n    //         const strength = userPerformanceData.userPerformanceData.strength\n    //         const speed = userPerformanceData.userPerformanceData.speed\n    //         const intensity = userPerformanceData.userPerformanceData.intensity\n\n    //         const maxValue = [\n    //             cardio,\n    //             energy,\n    //             endurance,\n    //             strength,\n    //             speed,\n    //             intensity,\n    //         ].sort(function (a, b) {\n    //             return b - a\n    //         })\n\n    //         function resizeValue(size) {\n    //             return (85 * size) / (maxValue[0] + 10)\n    //         }\n\n    //         const cardioCoord = {\n    //             axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(cardio),\n    //             axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(cardio),\n    //         }\n\n    //         const energyCoord = {\n    //             axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(energy),\n    //             axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(energy),\n    //         }\n    //         const enduranceCoord = {\n    //             axeX: 125,\n    //             axeY: 130 + resizeValue(endurance),\n    //         }\n    //         const strengthCoord = {\n    //             axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(strength),\n    //             axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(strength),\n    //         }\n    //         const speedCoord = {\n    //             axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(speed),\n    //             axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(speed),\n    //         }\n    //         const intensityCoord = {\n    //             axeX: 125,\n    //             axeY: 130 - resizeValue(intensity),\n    //         }\n\n    //         function newHexagon(size) {\n    //             return `M125 ${130 - size}, ${\n    //                 125 + Math.sin(Math.PI / 3) * size\n    //             } ${130 - Math.cos(Math.PI / 3) * size}, ${\n    //                 125 + Math.sin(Math.PI / 3) * size\n    //             } ${130 + Math.cos(Math.PI / 3) * size}, 125 ${130 + size}, ${\n    //                 125 - Math.sin(Math.PI / 3) * size\n    //             } ${130 + Math.cos(Math.PI / 3) * size}, ${\n    //                 125 - Math.sin(Math.PI / 3) * size\n    //             } ${130 - Math.cos(Math.PI / 3) * size}, 125 ${130 - size}`\n    //         }\n\n    //         const dPath = `M${intensityCoord.axeX} ${intensityCoord.axeY}, ${speedCoord.axeX} ${speedCoord.axeY}, ${strengthCoord.axeX} ${strengthCoord.axeY}, ${enduranceCoord.axeX} ${enduranceCoord.axeY},${energyCoord.axeX} ${energyCoord.axeY}, ${cardioCoord.axeX} ${cardioCoord.axeY}Z`\n\n    //         const svg = d3\n    //             .select('.radar-box')\n    //             .attr('width', 250)\n    //             .attr('height', 250)\n    //             .style('background', '#000')\n    //             .style('border-radius', '5px')\n\n    //         svg.append('g')\n    //             .append('path')\n    //             .attr('fill', 'none')\n    //             .attr('stroke', '#fff')\n    //             .attr('d', newHexagon(85))\n\n    //         svg.append('g')\n    //             .append('path')\n    //             .attr('fill', 'none')\n    //             .attr('stroke', '#fff')\n    //             .attr('d', newHexagon(65))\n\n    //         svg.append('g')\n    //             .append('path')\n    //             .attr('fill', 'none')\n    //             .attr('stroke', '#fff')\n    //             .attr('d', newHexagon(45))\n\n    //         svg.append('g')\n    //             .append('path')\n    //             .attr('fill', 'none')\n    //             .attr('stroke', '#fff')\n    //             .attr('d', newHexagon(25))\n\n    //         svg.append('g')\n    //             .append('path')\n    //             .attr('fill', 'none')\n    //             .attr('stroke', '#fff')\n    //             .attr('d', newHexagon(12))\n\n    //         svg.append('g')\n    //             .append('path')\n    //             .attr('fill', '#FF0101')\n    //             .attr('d', newHexagon(0))\n    //             .transition()\n    //             .duration(600)\n    //             .attr('d', dPath)\n    //             .attr('class', 'opacity-70')\n    //     }\n\n    //     setSvgWeight(SvgWeightCreation)\n    // }, [\n    //     SvgRadar,\n    //     userPerformanceData.userPerformanceData.cardio,\n    //     userPerformanceData.userPerformanceData.endurance,\n    //     userPerformanceData.userPerformanceData.energy,\n    //     userPerformanceData.userPerformanceData.intensity,\n    //     userPerformanceData.userPerformanceData.speed,\n    //     userPerformanceData.userPerformanceData.strength,\n    // ])\n    return (\n        <svg className=\"radar-box\">\n            <text x=\"100\" y=\"30\" fill=\"#fff\" fontSize=\"12\">\n                Intensité\n            </text>\n            <text x=\"210\" y=\"90\" fill=\"#fff\" fontSize=\"12\">\n                Vitesse\n            </text>\n            <text x=\"210\" y=\"170\" fill=\"#fff\" fontSize=\"12\">\n                Force\n            </text>\n            <text x=\"100\" y=\"230\" fill=\"#fff\" fontSize=\"12\">\n                Endurance\n            </text>\n            <text x=\"5\" y=\"170\" fill=\"#fff\" fontSize=\"12\">\n                Energie\n            </text>\n            <text x=\"5\" y=\"90\" fill=\"#fff\" fontSize=\"12\">\n                Cardio\n            </text>\n        </svg>\n    )\n}\n\nexport default RadarChart\n"]},"metadata":{},"sourceType":"module"}