{"ast":null,"code":"var _jsxFileName = \"/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/services/PerformanceService.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport UserPerformanceMapper from '../mapper/UserPerformanceMapper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useFetchPerf(userId) {\n  _s();\n\n  const [errorPerf, setError] = useState(null);\n  const [performanceLoaded, setIsLoaded] = useState(false);\n  const [performanceData, setPerformanceData] = useState({}); // Remarque : le tableau vide de dépendances [] indique\n  // que useEffect ne s’exécutera qu’une fois, un peu comme\n  // componentDidMount()\n\n  useEffect(() => {\n    //fetch(`http://localhost:3000/user/${userId}/performance`)\n    //** MOCK LINK **\n    fetch(`../user/${userId}/performance.json`).then(res => res.json()).then(({\n      data\n    }) => {\n      setPerformanceData(UserPerformanceMapper.convertToUserPerf(data));\n      setIsLoaded(true);\n    }, // Remarque : il faut gérer les erreurs ici plutôt que dans\n    // un bloc catch() afin que nous n’avalions pas les exceptions\n    // dues à de véritables bugs dans les composants.\n    error => {\n      setError(error);\n    });\n  }, [userId]);\n\n  if (errorPerf) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Erreur\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 16\n    }, this);\n  } else if (!performanceLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Chargement...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this);\n  } else {\n    return {\n      performanceData,\n      performanceLoaded,\n      errorPerf\n    };\n  }\n}\n\n_s(useFetchPerf, \"l5rbNG+ywDbzYM/zjB+MPrTuLaU=\");\n\nexport default useFetchPerf;","map":{"version":3,"sources":["/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/services/PerformanceService.jsx"],"names":["React","useState","useEffect","UserPerformanceMapper","useFetchPerf","userId","errorPerf","setError","performanceLoaded","setIsLoaded","performanceData","setPerformanceData","fetch","then","res","json","data","convertToUserPerf","error"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,qBAAP,MAAkC,iCAAlC;;;AAEA,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAAA;;AAC1B,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACO,iBAAD,EAAoBC,WAApB,IAAmCR,QAAQ,CAAC,KAAD,CAAjD;AACA,QAAM,CAACS,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,CAAC,EAAD,CAAtD,CAH0B,CAK1B;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACAU,IAAAA,KAAK,CAAE,WAAUP,MAAO,mBAAnB,CAAL,CACKQ,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADnB,EAEKF,IAFL,CAGQ,CAAC;AAAEG,MAAAA;AAAF,KAAD,KAAc;AACVL,MAAAA,kBAAkB,CACdR,qBAAqB,CAACc,iBAAtB,CAAwCD,IAAxC,CADc,CAAlB;AAGAP,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH,KART,EASQ;AACA;AACA;AACCS,IAAAA,KAAD,IAAW;AACPX,MAAAA,QAAQ,CAACW,KAAD,CAAR;AACH,KAdT;AAgBH,GAnBQ,EAmBN,CAACb,MAAD,CAnBM,CAAT;;AAqBA,MAAIC,SAAJ,EAAe;AACX,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD,MAEO,IAAI,CAACE,iBAAL,EAAwB;AAC3B,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFM,MAEA;AACH,WAAO;AACHE,MAAAA,eADG;AAEHF,MAAAA,iBAFG;AAGHF,MAAAA;AAHG,KAAP;AAKH;AACJ;;GAxCQF,Y;;AA0CT,eAAeA,YAAf","sourcesContent":["import React from 'react'\nimport { useState, useEffect } from 'react'\nimport UserPerformanceMapper from '../mapper/UserPerformanceMapper'\n\nfunction useFetchPerf(userId) {\n    const [errorPerf, setError] = useState(null)\n    const [performanceLoaded, setIsLoaded] = useState(false)\n    const [performanceData, setPerformanceData] = useState({})\n\n    // Remarque : le tableau vide de dépendances [] indique\n    // que useEffect ne s’exécutera qu’une fois, un peu comme\n    // componentDidMount()\n    useEffect(() => {\n        //fetch(`http://localhost:3000/user/${userId}/performance`)\n        //** MOCK LINK **\n        fetch(`../user/${userId}/performance.json`)\n            .then((res) => res.json())\n            .then(\n                ({ data }) => {\n                    setPerformanceData(\n                        UserPerformanceMapper.convertToUserPerf(data)\n                    )\n                    setIsLoaded(true)\n                },\n                // Remarque : il faut gérer les erreurs ici plutôt que dans\n                // un bloc catch() afin que nous n’avalions pas les exceptions\n                // dues à de véritables bugs dans les composants.\n                (error) => {\n                    setError(error)\n                }\n            )\n    }, [userId])\n\n    if (errorPerf) {\n        return <div>Erreur</div>\n    } else if (!performanceLoaded) {\n        return <div>Chargement...</div>\n    } else {\n        return {\n            performanceData,\n            performanceLoaded,\n            errorPerf,\n        }\n    }\n}\n\nexport default useFetchPerf\n"]},"metadata":{},"sourceType":"module"}