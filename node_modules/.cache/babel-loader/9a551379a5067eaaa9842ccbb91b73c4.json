{"ast":null,"code":"var _jsxFileName = \"/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/RadarChart.jsx\",\n    _s = $RefreshSig$();\n\nimport { useParams } from 'react-router';\nimport RadarChartD3 from '../D3/RadarChartD3';\nimport useFetchPerf from '../services/PerformanceService';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction RadarChart() {\n  _s();\n\n  const {\n    userId\n  } = useParams();\n  const {\n    performanceData,\n    performanceLoaded\n  } = useFetchPerf(userId.slice(-2));\n\n  function newHexagon(size) {\n    return `M125 ${130 - size}, ${125 + Math.sin(Math.PI / 3) * size} ${130 - Math.cos(Math.PI / 3) * size}, ${125 + Math.sin(Math.PI / 3) * size} ${130 + Math.cos(Math.PI / 3) * size}, 125 ${130 + size}, ${125 - Math.sin(Math.PI / 3) * size} ${130 + Math.cos(Math.PI / 3) * size}, ${125 - Math.sin(Math.PI / 3) * size} ${130 - Math.cos(Math.PI / 3) * size}, 125 ${130 - size}`;\n  }\n\n  const svg = d3.select('.radar-box').attr('width', 250).attr('height', 250).style('background', '#000').style('border-radius', '5px');\n  svg.append('g').append('path').attr('fill', 'none').attr('stroke', '#fff').attr('d', newHexagon(85));\n  svg.append('g').append('path').attr('fill', 'none').attr('stroke', '#fff').attr('d', newHexagon(65));\n  svg.append('g').append('path').attr('fill', 'none').attr('stroke', '#fff').attr('d', newHexagon(45));\n  svg.append('g').append('path').attr('fill', 'none').attr('stroke', '#fff').attr('d', newHexagon(25));\n  svg.append('g').append('path').attr('fill', 'none').attr('stroke', '#fff').attr('d', newHexagon(12)); // useEffect(() => {\n  //     const SvgWeightCreation = () => {\n  //         const cardio = userPerformanceData.userPerformanceData.cardio\n  //         const energy = userPerformanceData.userPerformanceData.energy\n  //         const endurance = userPerformanceData.userPerformanceData.endurance\n  //         const strength = userPerformanceData.userPerformanceData.strength\n  //         const speed = userPerformanceData.userPerformanceData.speed\n  //         const intensity = userPerformanceData.userPerformanceData.intensity\n  //         const maxValue = [\n  //             cardio,\n  //             energy,\n  //             endurance,\n  //             strength,\n  //             speed,\n  //             intensity,\n  //         ].sort(function (a, b) {\n  //             return b - a\n  //         })\n  //         function resizeValue(size) {\n  //             return (85 * size) / (maxValue[0] + 10)\n  //         }\n  //         const cardioCoord = {\n  //             axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(cardio),\n  //             axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(cardio),\n  //         }\n  //         const energyCoord = {\n  //             axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(energy),\n  //             axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(energy),\n  //         }\n  //         const enduranceCoord = {\n  //             axeX: 125,\n  //             axeY: 130 + resizeValue(endurance),\n  //         }\n  //         const strengthCoord = {\n  //             axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(strength),\n  //             axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(strength),\n  //         }\n  //         const speedCoord = {\n  //             axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(speed),\n  //             axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(speed),\n  //         }\n  //         const intensityCoord = {\n  //             axeX: 125,\n  //             axeY: 130 - resizeValue(intensity),\n  //         }\n  //         svg.append('g')\n  //             .append('path')\n  //             .attr('fill', '#FF0101')\n  //             .attr('d', newHexagon(0))\n  //             .transition()\n  //             .duration(600)\n  //             .attr('d', dPath)\n  //             .attr('class', 'opacity-70')\n  //     }\n  //     setSvgWeight(SvgWeightCreation)\n  // }, [\n  //     SvgRadar,\n  //     userPerformanceData.userPerformanceData.cardio,\n  //     userPerformanceData.userPerformanceData.endurance,\n  //     userPerformanceData.userPerformanceData.energy,\n  //     userPerformanceData.userPerformanceData.intensity,\n  //     userPerformanceData.userPerformanceData.speed,\n  //     userPerformanceData.userPerformanceData.strength,\n  // ])\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [performanceLoaded && /*#__PURE__*/_jsxDEV(RadarChartD3, {\n      perfs: performanceData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 35\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      className: \"radar-box bg-black rounded\",\n      width: \"250\",\n      height: \"250\",\n      children: [/*#__PURE__*/_jsxDEV(\"text\", {\n        x: \"100\",\n        y: \"30\",\n        fill: \"#fff\",\n        fontSize: \"12\",\n        children: \"Intensit\\xE9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: \"210\",\n        y: \"90\",\n        fill: \"#fff\",\n        fontSize: \"12\",\n        children: \"Vitesse\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: \"210\",\n        y: \"170\",\n        fill: \"#fff\",\n        fontSize: \"12\",\n        children: \"Force\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: \"100\",\n        y: \"230\",\n        fill: \"#fff\",\n        fontSize: \"12\",\n        children: \"Endurance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: \"5\",\n        y: \"170\",\n        fill: \"#fff\",\n        fontSize: \"12\",\n        children: \"Energie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: \"5\",\n        y: \"90\",\n        fill: \"#fff\",\n        fontSize: \"12\",\n        children: \"Cardio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(RadarChart, \"KOZCR0FlvBElR/YOUY6sQ63O8IU=\", false, function () {\n  return [useParams, useFetchPerf];\n});\n\n_c = RadarChart;\nexport default RadarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"RadarChart\");","map":{"version":3,"sources":["/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/RadarChart.jsx"],"names":["useParams","RadarChartD3","useFetchPerf","d3","RadarChart","userId","performanceData","performanceLoaded","slice","newHexagon","size","Math","sin","PI","cos","svg","select","attr","style","append"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,cAA1B;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AAClB,QAAM;AAAEC,IAAAA;AAAF,MAAaL,SAAS,EAA5B;AACA,QAAM;AAAEM,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAyCL,YAAY,CACvDG,MAAM,CAACG,KAAP,CAAa,CAAC,CAAd,CADuD,CAA3D;;AAIA,WAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,WAAQ,QAAO,MAAMA,IAAK,KAAI,MAAMC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,EAAL,GAAU,CAAnB,IAAwBH,IAAK,IAC7D,MAAMC,IAAI,CAACG,GAAL,CAASH,IAAI,CAACE,EAAL,GAAU,CAAnB,IAAwBH,IACjC,KAAI,MAAMC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,EAAL,GAAU,CAAnB,IAAwBH,IAAK,IACpC,MAAMC,IAAI,CAACG,GAAL,CAASH,IAAI,CAACE,EAAL,GAAU,CAAnB,IAAwBH,IACjC,SAAQ,MAAMA,IAAK,KAAI,MAAMC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,EAAL,GAAU,CAAnB,IAAwBH,IAAK,IACvD,MAAMC,IAAI,CAACG,GAAL,CAASH,IAAI,CAACE,EAAL,GAAU,CAAnB,IAAwBH,IACjC,KAAI,MAAMC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,EAAL,GAAU,CAAnB,IAAwBH,IAAK,IACpC,MAAMC,IAAI,CAACG,GAAL,CAASH,IAAI,CAACE,EAAL,GAAU,CAAnB,IAAwBH,IACjC,SAAQ,MAAMA,IAAK,EARpB;AASH;;AAED,QAAMK,GAAG,GAAGZ,EAAE,CACTa,MADO,CACA,YADA,EAEPC,IAFO,CAEF,OAFE,EAEO,GAFP,EAGPA,IAHO,CAGF,QAHE,EAGQ,GAHR,EAIPC,KAJO,CAID,YAJC,EAIa,MAJb,EAKPA,KALO,CAKD,eALC,EAKgB,KALhB,CAAZ;AAOAH,EAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EACKA,MADL,CACY,MADZ,EAEKF,IAFL,CAEU,MAFV,EAEkB,MAFlB,EAGKA,IAHL,CAGU,QAHV,EAGoB,MAHpB,EAIKA,IAJL,CAIU,GAJV,EAIeR,UAAU,CAAC,EAAD,CAJzB;AAMAM,EAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EACKA,MADL,CACY,MADZ,EAEKF,IAFL,CAEU,MAFV,EAEkB,MAFlB,EAGKA,IAHL,CAGU,QAHV,EAGoB,MAHpB,EAIKA,IAJL,CAIU,GAJV,EAIeR,UAAU,CAAC,EAAD,CAJzB;AAMAM,EAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EACKA,MADL,CACY,MADZ,EAEKF,IAFL,CAEU,MAFV,EAEkB,MAFlB,EAGKA,IAHL,CAGU,QAHV,EAGoB,MAHpB,EAIKA,IAJL,CAIU,GAJV,EAIeR,UAAU,CAAC,EAAD,CAJzB;AAMAM,EAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EACKA,MADL,CACY,MADZ,EAEKF,IAFL,CAEU,MAFV,EAEkB,MAFlB,EAGKA,IAHL,CAGU,QAHV,EAGoB,MAHpB,EAIKA,IAJL,CAIU,GAJV,EAIeR,UAAU,CAAC,EAAD,CAJzB;AAMAM,EAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EACKA,MADL,CACY,MADZ,EAEKF,IAFL,CAEU,MAFV,EAEkB,MAFlB,EAGKA,IAHL,CAGU,QAHV,EAGoB,MAHpB,EAIKA,IAJL,CAIU,GAJV,EAIeR,UAAU,CAAC,EAAD,CAJzB,EAjDkB,CAuDlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,sBACI;AAAA,eACKF,iBAAiB,iBAAI,QAAC,YAAD;AAAc,MAAA,KAAK,EAAED;AAArB;AAAA;AAAA;AAAA;AAAA,YAD1B,eAEI;AACI,MAAA,SAAS,EAAC,4BADd;AAEI,MAAA,KAAK,EAAC,KAFV;AAGI,MAAA,MAAM,EAAC,KAHX;AAAA,8BAKI;AAAM,QAAA,CAAC,EAAC,KAAR;AAAc,QAAA,CAAC,EAAC,IAAhB;AAAqB,QAAA,IAAI,EAAC,MAA1B;AAAiC,QAAA,QAAQ,EAAC,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAQI;AAAM,QAAA,CAAC,EAAC,KAAR;AAAc,QAAA,CAAC,EAAC,IAAhB;AAAqB,QAAA,IAAI,EAAC,MAA1B;AAAiC,QAAA,QAAQ,EAAC,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ,eAWI;AAAM,QAAA,CAAC,EAAC,KAAR;AAAc,QAAA,CAAC,EAAC,KAAhB;AAAsB,QAAA,IAAI,EAAC,MAA3B;AAAkC,QAAA,QAAQ,EAAC,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ,eAcI;AAAM,QAAA,CAAC,EAAC,KAAR;AAAc,QAAA,CAAC,EAAC,KAAhB;AAAsB,QAAA,IAAI,EAAC,MAA3B;AAAkC,QAAA,QAAQ,EAAC,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdJ,eAiBI;AAAM,QAAA,CAAC,EAAC,GAAR;AAAY,QAAA,CAAC,EAAC,KAAd;AAAoB,QAAA,IAAI,EAAC,MAAzB;AAAgC,QAAA,QAAQ,EAAC,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBJ,eAoBI;AAAM,QAAA,CAAC,EAAC,GAAR;AAAY,QAAA,CAAC,EAAC,IAAd;AAAmB,QAAA,IAAI,EAAC,MAAxB;AAA+B,QAAA,QAAQ,EAAC,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AA6BH;;GA1JQF,U;UACcJ,S,EAC4BE,Y;;;KAF1CE,U;AA4JT,eAAeA,UAAf","sourcesContent":["import { useParams } from 'react-router'\nimport RadarChartD3 from '../D3/RadarChartD3'\nimport useFetchPerf from '../services/PerformanceService'\nimport * as d3 from 'd3'\n\nfunction RadarChart() {\n    const { userId } = useParams()\n    const { performanceData, performanceLoaded } = useFetchPerf(\n        userId.slice(-2)\n    )\n\n    function newHexagon(size) {\n        return `M125 ${130 - size}, ${125 + Math.sin(Math.PI / 3) * size} ${\n            130 - Math.cos(Math.PI / 3) * size\n        }, ${125 + Math.sin(Math.PI / 3) * size} ${\n            130 + Math.cos(Math.PI / 3) * size\n        }, 125 ${130 + size}, ${125 - Math.sin(Math.PI / 3) * size} ${\n            130 + Math.cos(Math.PI / 3) * size\n        }, ${125 - Math.sin(Math.PI / 3) * size} ${\n            130 - Math.cos(Math.PI / 3) * size\n        }, 125 ${130 - size}`\n    }\n\n    const svg = d3\n        .select('.radar-box')\n        .attr('width', 250)\n        .attr('height', 250)\n        .style('background', '#000')\n        .style('border-radius', '5px')\n\n    svg.append('g')\n        .append('path')\n        .attr('fill', 'none')\n        .attr('stroke', '#fff')\n        .attr('d', newHexagon(85))\n\n    svg.append('g')\n        .append('path')\n        .attr('fill', 'none')\n        .attr('stroke', '#fff')\n        .attr('d', newHexagon(65))\n\n    svg.append('g')\n        .append('path')\n        .attr('fill', 'none')\n        .attr('stroke', '#fff')\n        .attr('d', newHexagon(45))\n\n    svg.append('g')\n        .append('path')\n        .attr('fill', 'none')\n        .attr('stroke', '#fff')\n        .attr('d', newHexagon(25))\n\n    svg.append('g')\n        .append('path')\n        .attr('fill', 'none')\n        .attr('stroke', '#fff')\n        .attr('d', newHexagon(12))\n\n    // useEffect(() => {\n    //     const SvgWeightCreation = () => {\n    //         const cardio = userPerformanceData.userPerformanceData.cardio\n    //         const energy = userPerformanceData.userPerformanceData.energy\n    //         const endurance = userPerformanceData.userPerformanceData.endurance\n    //         const strength = userPerformanceData.userPerformanceData.strength\n    //         const speed = userPerformanceData.userPerformanceData.speed\n    //         const intensity = userPerformanceData.userPerformanceData.intensity\n\n    //         const maxValue = [\n    //             cardio,\n    //             energy,\n    //             endurance,\n    //             strength,\n    //             speed,\n    //             intensity,\n    //         ].sort(function (a, b) {\n    //             return b - a\n    //         })\n\n    //         function resizeValue(size) {\n    //             return (85 * size) / (maxValue[0] + 10)\n    //         }\n\n    //         const cardioCoord = {\n    //             axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(cardio),\n    //             axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(cardio),\n    //         }\n\n    //         const energyCoord = {\n    //             axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(energy),\n    //             axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(energy),\n    //         }\n    //         const enduranceCoord = {\n    //             axeX: 125,\n    //             axeY: 130 + resizeValue(endurance),\n    //         }\n    //         const strengthCoord = {\n    //             axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(strength),\n    //             axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(strength),\n    //         }\n    //         const speedCoord = {\n    //             axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(speed),\n    //             axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(speed),\n    //         }\n    //         const intensityCoord = {\n    //             axeX: 125,\n    //             axeY: 130 - resizeValue(intensity),\n    //         }\n\n    //         svg.append('g')\n    //             .append('path')\n    //             .attr('fill', '#FF0101')\n    //             .attr('d', newHexagon(0))\n    //             .transition()\n    //             .duration(600)\n    //             .attr('d', dPath)\n    //             .attr('class', 'opacity-70')\n    //     }\n\n    //     setSvgWeight(SvgWeightCreation)\n    // }, [\n    //     SvgRadar,\n    //     userPerformanceData.userPerformanceData.cardio,\n    //     userPerformanceData.userPerformanceData.endurance,\n    //     userPerformanceData.userPerformanceData.energy,\n    //     userPerformanceData.userPerformanceData.intensity,\n    //     userPerformanceData.userPerformanceData.speed,\n    //     userPerformanceData.userPerformanceData.strength,\n    // ])\n    return (\n        <>\n            {performanceLoaded && <RadarChartD3 perfs={performanceData} />}\n            <svg\n                className=\"radar-box bg-black rounded\"\n                width=\"250\"\n                height=\"250\"\n            >\n                <text x=\"100\" y=\"30\" fill=\"#fff\" fontSize=\"12\">\n                    Intensité\n                </text>\n                <text x=\"210\" y=\"90\" fill=\"#fff\" fontSize=\"12\">\n                    Vitesse\n                </text>\n                <text x=\"210\" y=\"170\" fill=\"#fff\" fontSize=\"12\">\n                    Force\n                </text>\n                <text x=\"100\" y=\"230\" fill=\"#fff\" fontSize=\"12\">\n                    Endurance\n                </text>\n                <text x=\"5\" y=\"170\" fill=\"#fff\" fontSize=\"12\">\n                    Energie\n                </text>\n                <text x=\"5\" y=\"90\" fill=\"#fff\" fontSize=\"12\">\n                    Cardio\n                </text>\n            </svg>\n        </>\n    )\n}\n\nexport default RadarChart\n"]},"metadata":{},"sourceType":"module"}