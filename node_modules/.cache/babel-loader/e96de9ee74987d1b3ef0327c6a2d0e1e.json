{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport * as d3 from 'd3';\nimport { useEffect, useState } from 'react';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RadarChartD3(perfs) {\n  _s();\n\n  const [SvgSessions, setSvgWeight] = useState();\n  console.log(perfs); // useEffect(() => {\n  //     const SvgWeightCreation = () => {\n  //         const cardio = userPerformanceData.userPerformanceData.cardio\n  //         const energy = userPerformanceData.userPerformanceData.energy\n  //         const endurance = userPerformanceData.userPerformanceData.endurance\n  //         const strength = userPerformanceData.userPerformanceData.strength\n  //         const speed = userPerformanceData.userPerformanceData.speed\n  //         const intensity = userPerformanceData.userPerformanceData.intensity\n  //         const maxValue = [\n  //             cardio,\n  //             energy,\n  //             endurance,\n  //             strength,\n  //             speed,\n  //             intensity,\n  //         ].sort(function (a, b) {\n  //             return b - a\n  //         })\n  //         function resizeValue(size) {\n  //             return (85 * size) / (maxValue[0] + 10)\n  //         }\n  //         const cardioCoord = {\n  //             axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(cardio),\n  //             axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(cardio),\n  //         }\n  //         const energyCoord = {\n  //             axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(energy),\n  //             axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(energy),\n  //         }\n  //         const enduranceCoord = {\n  //             axeX: 125,\n  //             axeY: 130 + resizeValue(endurance),\n  //         }\n  //         const strengthCoord = {\n  //             axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(strength),\n  //             axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(strength),\n  //         }\n  //         const speedCoord = {\n  //             axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(speed),\n  //             axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(speed),\n  //         }\n  //         const intensityCoord = {\n  //             axeX: 125,\n  //             axeY: 130 - resizeValue(intensity),\n  //         }\n  //         function newHexagon(size) {\n  //             return `M125 ${130 - size}, ${\n  //                 125 + Math.sin(Math.PI / 3) * size\n  //             } ${130 - Math.cos(Math.PI / 3) * size}, ${\n  //                 125 + Math.sin(Math.PI / 3) * size\n  //             } ${130 + Math.cos(Math.PI / 3) * size}, 125 ${130 + size}, ${\n  //                 125 - Math.sin(Math.PI / 3) * size\n  //             } ${130 + Math.cos(Math.PI / 3) * size}, ${\n  //                 125 - Math.sin(Math.PI / 3) * size\n  //             } ${130 - Math.cos(Math.PI / 3) * size}, 125 ${130 - size}`\n  //         }\n  //         const dPath = `M${intensityCoord.axeX} ${intensityCoord.axeY}, ${speedCoord.axeX} ${speedCoord.axeY}, ${strengthCoord.axeX} ${strengthCoord.axeY}, ${enduranceCoord.axeX} ${enduranceCoord.axeY},${energyCoord.axeX} ${energyCoord.axeY}, ${cardioCoord.axeX} ${cardioCoord.axeY}Z`\n  //         const svg = d3\n  //             .select('.radar-box')\n  //             .attr('width', 250)\n  //             .attr('height', 250)\n  //             .style('background', '#000')\n  //             .style('border-radius', '5px')\n  //         svg.append('g')\n  //             .append('path')\n  //             .attr('fill', 'none')\n  //             .attr('stroke', '#fff')\n  //             .attr('d', newHexagon(85))\n  //         svg.append('g')\n  //             .append('path')\n  //             .attr('fill', 'none')\n  //             .attr('stroke', '#fff')\n  //             .attr('d', newHexagon(65))\n  //         svg.append('g')\n  //             .append('path')\n  //             .attr('fill', 'none')\n  //             .attr('stroke', '#fff')\n  //             .attr('d', newHexagon(45))\n  //         svg.append('g')\n  //             .append('path')\n  //             .attr('fill', 'none')\n  //             .attr('stroke', '#fff')\n  //             .attr('d', newHexagon(25))\n  //         svg.append('g')\n  //             .append('path')\n  //             .attr('fill', 'none')\n  //             .attr('stroke', '#fff')\n  //             .attr('d', newHexagon(12))\n  //         svg.append('g')\n  //             .append('path')\n  //             .attr('fill', '#FF0101')\n  //             .attr('d', newHexagon(0))\n  //             .transition()\n  //             .duration(600)\n  //             .attr('d', dPath)\n  //             .attr('class', 'opacity-70')\n  //     }\n  //     setSvgWeight(SvgWeightCreation)\n  // }, [\n  //     SvgRadar,\n  //     userPerformanceData.userPerformanceData.cardio,\n  //     userPerformanceData.userPerformanceData.endurance,\n  //     userPerformanceData.userPerformanceData.energy,\n  //     userPerformanceData.userPerformanceData.intensity,\n  //     userPerformanceData.userPerformanceData.speed,\n  //     userPerformanceData.userPerformanceData.strength,\n  // ])\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \" \"\n  }, void 0, false);\n}\n\n_s(RadarChartD3, \"IELiC6MHfRAWn2qkUgEc8RMR3e0=\");\n\n_c = RadarChartD3;\nexport default RadarChartD3;\n\nvar _c;\n\n$RefreshReg$(_c, \"RadarChartD3\");","map":{"version":3,"sources":["/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/D3/RadarChartD3.jsx"],"names":["d3","useEffect","useState","RadarChartD3","perfs","SvgSessions","setSvgWeight","console","log"],"mappings":";;AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AACzB,QAAM,CAACC,WAAD,EAAcC,YAAd,IAA8BJ,QAAQ,EAA5C;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAFyB,CAIzsBAAO;AAAA;AAAA,mBAAP;AACH;;GA/HQD,Y;;KAAAA,Y;AAiIT,eAAeA,YAAf","sourcesContent":["import * as d3 from 'd3'\nimport { useEffect, useState } from 'react'\n\nfunction RadarChartD3(perfs) {\n    const [SvgSessions, setSvgWeight] = useState()\n    console.log(perfs)\n\n    // useEffect(() => {\n    //     const SvgWeightCreation = () => {\n    //         const cardio = userPerformanceData.userPerformanceData.cardio\n    //         const energy = userPerformanceData.userPerformanceData.energy\n    //         const endurance = userPerformanceData.userPerformanceData.endurance\n    //         const strength = userPerformanceData.userPerformanceData.strength\n    //         const speed = userPerformanceData.userPerformanceData.speed\n    //         const intensity = userPerformanceData.userPerformanceData.intensity\n\n    //         const maxValue = [\n    //             cardio,\n    //             energy,\n    //             endurance,\n    //             strength,\n    //             speed,\n    //             intensity,\n    //         ].sort(function (a, b) {\n    //             return b - a\n    //         })\n\n    //         function resizeValue(size) {\n    //             return (85 * size) / (maxValue[0] + 10)\n    //         }\n\n    //         const cardioCoord = {\n    //             axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(cardio),\n    //             axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(cardio),\n    //         }\n\n    //         const energyCoord = {\n    //             axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(energy),\n    //             axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(energy),\n    //         }\n    //         const enduranceCoord = {\n    //             axeX: 125,\n    //             axeY: 130 + resizeValue(endurance),\n    //         }\n    //         const strengthCoord = {\n    //             axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(strength),\n    //             axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(strength),\n    //         }\n    //         const speedCoord = {\n    //             axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(speed),\n    //             axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(speed),\n    //         }\n    //         const intensityCoord = {\n    //             axeX: 125,\n    //             axeY: 130 - resizeValue(intensity),\n    //         }\n\n    //         function newHexagon(size) {\n    //             return `M125 ${130 - size}, ${\n    //                 125 + Math.sin(Math.PI / 3) * size\n    //             } ${130 - Math.cos(Math.PI / 3) * size}, ${\n    //                 125 + Math.sin(Math.PI / 3) * size\n    //             } ${130 + Math.cos(Math.PI / 3) * size}, 125 ${130 + size}, ${\n    //                 125 - Math.sin(Math.PI / 3) * size\n    //             } ${130 + Math.cos(Math.PI / 3) * size}, ${\n    //                 125 - Math.sin(Math.PI / 3) * size\n    //             } ${130 - Math.cos(Math.PI / 3) * size}, 125 ${130 - size}`\n    //         }\n\n    //         const dPath = `M${intensityCoord.axeX} ${intensityCoord.axeY}, ${speedCoord.axeX} ${speedCoord.axeY}, ${strengthCoord.axeX} ${strengthCoord.axeY}, ${enduranceCoord.axeX} ${enduranceCoord.axeY},${energyCoord.axeX} ${energyCoord.axeY}, ${cardioCoord.axeX} ${cardioCoord.axeY}Z`\n\n    //         const svg = d3\n    //             .select('.radar-box')\n    //             .attr('width', 250)\n    //             .attr('height', 250)\n    //             .style('background', '#000')\n    //             .style('border-radius', '5px')\n\n    //         svg.append('g')\n    //             .append('path')\n    //             .attr('fill', 'none')\n    //             .attr('stroke', '#fff')\n    //             .attr('d', newHexagon(85))\n\n    //         svg.append('g')\n    //             .append('path')\n    //             .attr('fill', 'none')\n    //             .attr('stroke', '#fff')\n    //             .attr('d', newHexagon(65))\n\n    //         svg.append('g')\n    //             .append('path')\n    //             .attr('fill', 'none')\n    //             .attr('stroke', '#fff')\n    //             .attr('d', newHexagon(45))\n\n    //         svg.append('g')\n    //             .append('path')\n    //             .attr('fill', 'none')\n    //             .attr('stroke', '#fff')\n    //             .attr('d', newHexagon(25))\n\n    //         svg.append('g')\n    //             .append('path')\n    //             .attr('fill', 'none')\n    //             .attr('stroke', '#fff')\n    //             .attr('d', newHexagon(12))\n\n    //         svg.append('g')\n    //             .append('path')\n    //             .attr('fill', '#FF0101')\n    //             .attr('d', newHexagon(0))\n    //             .transition()\n    //             .duration(600)\n    //             .attr('d', dPath)\n    //             .attr('class', 'opacity-70')\n    //     }\n\n    //     setSvgWeight(SvgWeightCreation)\n    // }, [\n    //     SvgRadar,\n    //     userPerformanceData.userPerformanceData.cardio,\n    //     userPerformanceData.userPerformanceData.endurance,\n    //     userPerformanceData.userPerformanceData.energy,\n    //     userPerformanceData.userPerformanceData.intensity,\n    //     userPerformanceData.userPerformanceData.speed,\n    //     userPerformanceData.userPerformanceData.strength,\n    // ])\n\n    return <> </>\n}\n\nexport default RadarChartD3\n"]},"metadata":{},"sourceType":"module"}