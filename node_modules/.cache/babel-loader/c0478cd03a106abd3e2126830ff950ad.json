{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport * as d3 from 'd3';\nimport { useEffect, useState } from 'react';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RadarChartD3(perfs) {\n  _s();\n\n  const [SvgSessions, setSvgWeight] = useState();\n  console.log(perfs.perfs);\n  useEffect(() => {\n    const SvgWeightCreation = () => {\n      const cardio = userPerformanceData.userPerformanceData.cardio;\n      const energy = userPerformanceData.userPerformanceData.energy;\n      const endurance = userPerformanceData.userPerformanceData.endurance;\n      const strength = userPerformanceData.userPerformanceData.strength;\n      const speed = userPerformanceData.userPerformanceData.speed;\n      const intensity = userPerformanceData.userPerformanceData.intensity;\n      const maxValue = [cardio, energy, endurance, strength, speed, intensity].sort(function (a, b) {\n        return b - a;\n      });\n\n      function resizeValue(size) {\n        return 85 * size / (maxValue[0] + 10);\n      }\n\n      const cardioCoord = {\n        axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(cardio),\n        axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(cardio)\n      };\n      const energyCoord = {\n        axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(energy),\n        axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(energy)\n      };\n      const enduranceCoord = {\n        axeX: 125,\n        axeY: 130 + resizeValue(endurance)\n      };\n      const strengthCoord = {\n        axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(strength),\n        axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(strength)\n      };\n      const speedCoord = {\n        axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(speed),\n        axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(speed)\n      };\n      const intensityCoord = {\n        axeX: 125,\n        axeY: 130 - resizeValue(intensity)\n      };\n\n      function newHexagon(size) {\n        return `M125 ${130 - size}, ${125 + Math.sin(Math.PI / 3) * size} ${130 - Math.cos(Math.PI / 3) * size}, ${125 + Math.sin(Math.PI / 3) * size} ${130 + Math.cos(Math.PI / 3) * size}, 125 ${130 + size}, ${125 - Math.sin(Math.PI / 3) * size} ${130 + Math.cos(Math.PI / 3) * size}, ${125 - Math.sin(Math.PI / 3) * size} ${130 - Math.cos(Math.PI / 3) * size}, 125 ${130 - size}`;\n      }\n\n      const dPath = `M${intensityCoord.axeX} ${intensityCoord.axeY}, ${speedCoord.axeX} ${speedCoord.axeY}, ${strengthCoord.axeX} ${strengthCoord.axeY}, ${enduranceCoord.axeX} ${enduranceCoord.axeY},${energyCoord.axeX} ${energyCoord.axeY}, ${cardioCoord.axeX} ${cardioCoord.axeY}Z`;\n      const svg = d3.select('.radar-box');\n      svg.append('g').append('path').attr('fill', '#FF0101').attr('d', newHexagon(0)).transition().duration(600).attr('d', dPath).attr('class', 'opacity-70');\n    };\n\n    setSvgWeight(SvgWeightCreation);\n  }, [SvgRadar, userPerformanceData.userPerformanceData.cardio, userPerformanceData.userPerformanceData.endurance, userPerformanceData.userPerformanceData.energy, userPerformanceData.userPerformanceData.intensity, userPerformanceData.userPerformanceData.speed, userPerformanceData.userPerformanceData.strength]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \" \"\n  }, void 0, false);\n}\n\n_s(RadarChartD3, \"Vp1/Is2GUV66UXO+2Lj7evv/APA=\");\n\n_c = RadarChartD3;\nexport default RadarChartD3;\n\nvar _c;\n\n$RefreshReg$(_c, \"RadarChartD3\");","map":{"version":3,"sources":["/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/D3/RadarChartD3.jsx"],"names":["d3","useEffect","useState","RadarChartD3","perfs","SvgSessions","setSvgWeight","console","log","SvgWeightCreation","cardio","userPerformanceData","energy","endurance","strength","speed","intensity","maxValue","sort","a","b","resizeValue","size","cardioCoord","axeX","Math","sin","PI","axeY","cos","energyCoord","enduranceCoord","strengthCoord","speedCoord","intensityCoord","newHexagon","dPath","svg","select","append","attr","transition","duration","SvgRadar"],"mappings":"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","sourcesContent":["import * as d3 from 'd3'\nimport { useEffect, useState } from 'react'\n\nfunction RadarChartD3(perfs) {\n    const [SvgSessions, setSvgWeight] = useState()\n    console.log(perfs.perfs)\n\n    useEffect(() => {\n        const SvgWeightCreation = () => {\n            const cardio = userPerformanceData.userPerformanceData.cardio\n            const energy = userPerformanceData.userPerformanceData.energy\n            const endurance = userPerformanceData.userPerformanceData.endurance\n            const strength = userPerformanceData.userPerformanceData.strength\n            const speed = userPerformanceData.userPerformanceData.speed\n            const intensity = userPerformanceData.userPerformanceData.intensity\n\n            const maxValue = [\n                cardio,\n                energy,\n                endurance,\n                strength,\n                speed,\n                intensity,\n            ].sort(function (a, b) {\n                return b - a\n            })\n\n            function resizeValue(size) {\n                return (85 * size) / (maxValue[0] + 10)\n            }\n\n            const cardioCoord = {\n                axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(cardio),\n                axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(cardio),\n            }\n\n            const energyCoord = {\n                axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(energy),\n                axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(energy),\n            }\n            const enduranceCoord = {\n                axeX: 125,\n                axeY: 130 + resizeValue(endurance),\n            }\n            const strengthCoord = {\n                axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(strength),\n                axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(strength),\n            }\n            const speedCoord = {\n                axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(speed),\n                axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(speed),\n            }\n            const intensityCoord = {\n                axeX: 125,\n                axeY: 130 - resizeValue(intensity),\n            }\n\n            function newHexagon(size) {\n                return `M125 ${130 - size}, ${\n                    125 + Math.sin(Math.PI / 3) * size\n                } ${130 - Math.cos(Math.PI / 3) * size}, ${\n                    125 + Math.sin(Math.PI / 3) * size\n                } ${130 + Math.cos(Math.PI / 3) * size}, 125 ${130 + size}, ${\n                    125 - Math.sin(Math.PI / 3) * size\n                } ${130 + Math.cos(Math.PI / 3) * size}, ${\n                    125 - Math.sin(Math.PI / 3) * size\n                } ${130 - Math.cos(Math.PI / 3) * size}, 125 ${130 - size}`\n            }\n\n            const dPath = `M${intensityCoord.axeX} ${intensityCoord.axeY}, ${speedCoord.axeX} ${speedCoord.axeY}, ${strengthCoord.axeX} ${strengthCoord.axeY}, ${enduranceCoord.axeX} ${enduranceCoord.axeY},${energyCoord.axeX} ${energyCoord.axeY}, ${cardioCoord.axeX} ${cardioCoord.axeY}Z`\n\n            const svg = d3.select('.radar-box')\n\n            svg.append('g')\n                .append('path')\n                .attr('fill', '#FF0101')\n                .attr('d', newHexagon(0))\n                .transition()\n                .duration(600)\n                .attr('d', dPath)\n                .attr('class', 'opacity-70')\n        }\n\n        setSvgWeight(SvgWeightCreation)\n    }, [\n        SvgRadar,\n        userPerformanceData.userPerformanceData.cardio,\n        userPerformanceData.userPerformanceData.endurance,\n        userPerformanceData.userPerformanceData.energy,\n        userPerformanceData.userPerformanceData.intensity,\n        userPerformanceData.userPerformanceData.speed,\n        userPerformanceData.userPerformanceData.strength,\n    ])\n\n    return <> </>\n}\n\nexport default RadarChartD3\n"]},"metadata":{},"sourceType":"module"}