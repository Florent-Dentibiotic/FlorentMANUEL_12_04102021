{"ast":null,"code":"var _jsxFileName = \"/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/services/SessionsService.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport UserSessionsMapper from '../mapper/UserSessionsMapper';\n/**\n * Custom Hook to Fetch Sessions Duration Data\n * @param { number } id\n * @return { SessionsDuration }\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useFetchSessions(id) {\n  _s();\n\n  const [errorSessions, setError] = useState(null);\n  const [sessionsLoaded, setIsLoaded] = useState(false);\n  const [sessionsData, setsessionsData] = useState({});\n  useEffect(() => {\n    async function fetchUser() {\n      try {\n        const response = await fetch(`http://localhost:3000/user/${id}/average-sessions`); //** MOCK LINK **\n        //const response = await fetch(`../${id}/average-sessions.json`)\n\n        const {\n          data\n        } = await response.json();\n        setsessionsData(UserSessionsMapper.convertToSession(data));\n      } catch (err) {\n        console.log(err);\n        setError(true);\n      } finally {\n        setIsLoaded(true);\n      }\n    }\n\n    fetchUser();\n  }, [id]);\n\n  if (errorSessions) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Erreur\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this);\n  } else if (!sessionsLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Chargement...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }, this);\n  } else {\n    return {\n      sessionsData,\n      sessionsLoaded,\n      errorSessions\n    };\n  }\n}\n\n_s(useFetchSessions, \"q+aZqFUdciUaagdzyMHjDBPqmDA=\");\n\nexport default useFetchSessions;","map":{"version":3,"sources":["/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/services/SessionsService.jsx"],"names":["React","useState","useEffect","UserSessionsMapper","useFetchSessions","id","errorSessions","setError","sessionsLoaded","setIsLoaded","sessionsData","setsessionsData","fetchUser","response","fetch","data","json","convertToSession","err","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,kBAAP,MAA+B,8BAA/B;AAEA;AACA;AACA;AACA;AACA;;;;AAEA,SAASC,gBAAT,CAA0BC,EAA1B,EAA8B;AAAA;;AAC1B,QAAM,CAACC,aAAD,EAAgBC,QAAhB,IAA4BN,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACO,cAAD,EAAiBC,WAAjB,IAAgCR,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,EAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeU,SAAf,GAA2B;AACvB,UAAI;AACA,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CACvB,8BAA6BT,EAAG,mBADT,CAA5B,CADA,CAIA;AACA;;AACA,cAAM;AAAEU,UAAAA;AAAF,YAAW,MAAMF,QAAQ,CAACG,IAAT,EAAvB;AACAL,QAAAA,eAAe,CAACR,kBAAkB,CAACc,gBAAnB,CAAoCF,IAApC,CAAD,CAAf;AACH,OARD,CAQE,OAAOG,GAAP,EAAY;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAX,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,OAXD,SAWU;AACNE,QAAAA,WAAW,CAAC,IAAD,CAAX;AACH;AACJ;;AACDG,IAAAA,SAAS;AACZ,GAlBQ,EAkBN,CAACP,EAAD,CAlBM,CAAT;;AAoBA,MAAIC,aAAJ,EAAmB;AACf,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD,MAEO,IAAI,CAACE,cAAL,EAAqB;AACxB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFM,MAEA;AACH,WAAO;AACHE,MAAAA,YADG;AAEHF,MAAAA,cAFG;AAGHF,MAAAA;AAHG,KAAP;AAKH;AACJ;;GApCQF,gB;;AAsCT,eAAeA,gBAAf","sourcesContent":["import React from 'react'\nimport { useState, useEffect } from 'react'\nimport UserSessionsMapper from '../mapper/UserSessionsMapper'\n\n/**\n * Custom Hook to Fetch Sessions Duration Data\n * @param { number } id\n * @return { SessionsDuration }\n */\n\nfunction useFetchSessions(id) {\n    const [errorSessions, setError] = useState(null)\n    const [sessionsLoaded, setIsLoaded] = useState(false)\n    const [sessionsData, setsessionsData] = useState({})\n\n    useEffect(() => {\n        async function fetchUser() {\n            try {\n                const response = await fetch(\n                    `http://localhost:3000/user/${id}/average-sessions`\n                )\n                //** MOCK LINK **\n                //const response = await fetch(`../${id}/average-sessions.json`)\n                const { data } = await response.json()\n                setsessionsData(UserSessionsMapper.convertToSession(data))\n            } catch (err) {\n                console.log(err)\n                setError(true)\n            } finally {\n                setIsLoaded(true)\n            }\n        }\n        fetchUser()\n    }, [id])\n\n    if (errorSessions) {\n        return <div>Erreur</div>\n    } else if (!sessionsLoaded) {\n        return <div>Chargement...</div>\n    } else {\n        return {\n            sessionsData,\n            sessionsLoaded,\n            errorSessions,\n        }\n    }\n}\n\nexport default useFetchSessions\n"]},"metadata":{},"sourceType":"module"}