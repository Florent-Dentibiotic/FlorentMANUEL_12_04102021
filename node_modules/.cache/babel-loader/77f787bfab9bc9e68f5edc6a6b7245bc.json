{"ast":null,"code":"import * as d3 from 'd3';\nimport { useEffect } from 'react';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RadarChartD3(perfs) {\n  const cardio = perfs.perfs.cardio;\n  const energy = perfs.perfs.energy;\n  const endurance = perfs.perfs.endurance;\n  const strength = perfs.perfs.strength;\n  const speed = perfs.perfs.speed;\n  const intensity = perfs.perfs.intensity;\n  const maxValue = [cardio, energy, endurance, strength, speed, intensity].sort(function (a, b) {\n    return b - a;\n  });\n\n  function resizeValue(size) {\n    return 85 * size / (maxValue[0] + 10);\n  }\n\n  const cardioCoord = {\n    axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(cardio),\n    axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(cardio)\n  };\n  const energyCoord = {\n    axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(energy),\n    axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(energy)\n  };\n  const enduranceCoord = {\n    axeX: 125,\n    axeY: 130 + resizeValue(endurance)\n  };\n  const strengthCoord = {\n    axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(strength),\n    axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(strength)\n  };\n  const speedCoord = {\n    axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(speed),\n    axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(speed)\n  };\n  const intensityCoord = {\n    axeX: 125,\n    axeY: 130 - resizeValue(intensity)\n  };\n\n  function newHexagon(size) {\n    return `M125 ${130 - size}, ${125 + Math.sin(Math.PI / 3) * size} ${130 - Math.cos(Math.PI / 3) * size}, ${125 + Math.sin(Math.PI / 3) * size} ${130 + Math.cos(Math.PI / 3) * size}, 125 ${130 + size}, ${125 - Math.sin(Math.PI / 3) * size} ${130 + Math.cos(Math.PI / 3) * size}, ${125 - Math.sin(Math.PI / 3) * size} ${130 - Math.cos(Math.PI / 3) * size}, 125 ${130 - size}`;\n  }\n\n  const dPath = `M${intensityCoord.axeX} ${intensityCoord.axeY}, ${speedCoord.axeX} ${speedCoord.axeY}, ${strengthCoord.axeX} ${strengthCoord.axeY}, ${enduranceCoord.axeX} ${enduranceCoord.axeY},${energyCoord.axeX} ${energyCoord.axeY}, ${cardioCoord.axeX} ${cardioCoord.axeY}Z`;\n  const svg = d3.select('.radar-box');\n  svg.append('g').append('path').attr('fill', '#FF0101').attr('d', newHexagon(0)).transition().duration(600).attr('d', dPath).attr('class', 'opacity-70');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \" \"\n  }, void 0, false);\n}\n\n_c = RadarChartD3;\nexport default RadarChartD3;\n\nvar _c;\n\n$RefreshReg$(_c, \"RadarChartD3\");","map":{"version":3,"sources":["/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/D3/RadarChartD3.jsx"],"names":["d3","useEffect","RadarChartD3","perfs","cardio","energy","endurance","strength","speed","intensity","maxValue","sort","a","b","resizeValue","size","cardioCoord","axeX","Math","sin","PI","axeY","cos","energyCoord","enduranceCoord","strengthCoord","speedCoord","intensityCoord","newHexagon","dPath","svg","select","append","attr","transition","duration"],"mappings":"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","sourcesContent":["import * as d3 from 'd3'\nimport { useEffect } from 'react'\n\nfunction RadarChartD3(perfs) {\n    const cardio = perfs.perfs.cardio\n    const energy = perfs.perfs.energy\n    const endurance = perfs.perfs.endurance\n    const strength = perfs.perfs.strength\n    const speed = perfs.perfs.speed\n    const intensity = perfs.perfs.intensity\n\n    const maxValue = [\n        cardio,\n        energy,\n        endurance,\n        strength,\n        speed,\n        intensity,\n    ].sort(function (a, b) {\n        return b - a\n    })\n\n    function resizeValue(size) {\n        return (85 * size) / (maxValue[0] + 10)\n    }\n\n    const cardioCoord = {\n        axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(cardio),\n        axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(cardio),\n    }\n\n    const energyCoord = {\n        axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(energy),\n        axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(energy),\n    }\n    const enduranceCoord = {\n        axeX: 125,\n        axeY: 130 + resizeValue(endurance),\n    }\n    const strengthCoord = {\n        axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(strength),\n        axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(strength),\n    }\n    const speedCoord = {\n        axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(speed),\n        axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(speed),\n    }\n    const intensityCoord = {\n        axeX: 125,\n        axeY: 130 - resizeValue(intensity),\n    }\n\n    function newHexagon(size) {\n        return `M125 ${130 - size}, ${125 + Math.sin(Math.PI / 3) * size} ${\n            130 - Math.cos(Math.PI / 3) * size\n        }, ${125 + Math.sin(Math.PI / 3) * size} ${\n            130 + Math.cos(Math.PI / 3) * size\n        }, 125 ${130 + size}, ${125 - Math.sin(Math.PI / 3) * size} ${\n            130 + Math.cos(Math.PI / 3) * size\n        }, ${125 - Math.sin(Math.PI / 3) * size} ${\n            130 - Math.cos(Math.PI / 3) * size\n        }, 125 ${130 - size}`\n    }\n\n    const dPath = `M${intensityCoord.axeX} ${intensityCoord.axeY}, ${speedCoord.axeX} ${speedCoord.axeY}, ${strengthCoord.axeX} ${strengthCoord.axeY}, ${enduranceCoord.axeX} ${enduranceCoord.axeY},${energyCoord.axeX} ${energyCoord.axeY}, ${cardioCoord.axeX} ${cardioCoord.axeY}Z`\n\n    const svg = d3.select('.radar-box')\n\n    svg.append('g')\n        .append('path')\n        .attr('fill', '#FF0101')\n        .attr('d', newHexagon(0))\n        .transition()\n        .duration(600)\n        .attr('d', dPath)\n        .attr('class', 'opacity-70')\n\n    return <> </>\n}\n\nexport default RadarChartD3\n"]},"metadata":{},"sourceType":"module"}