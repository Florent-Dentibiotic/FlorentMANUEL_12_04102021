[{"/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/reportWebVitals.js":"1","/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/index.jsx":"2","/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/pages/Home.jsx":"3","/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/Header.jsx":"4","/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/AsideNav.jsx":"5","/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/pages/UserInterface.jsx":"6","/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/Weight.jsx":"7","/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/KeyData.jsx":"8","/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/SessionDuration.jsx":"9","/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/Score.jsx":"10","/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/Radar.jsx":"11","/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/Error.jsx":"12"},{"size":362,"mtime":1633347456106,"results":"13","hashOfConfig":"14"},{"size":702,"mtime":1634133022324,"results":"15","hashOfConfig":"14"},{"size":1048,"mtime":1634132743252,"results":"16","hashOfConfig":"14"},{"size":793,"mtime":1633770775279,"results":"17","hashOfConfig":"14"},{"size":1354,"mtime":1633698688269,"results":"18","hashOfConfig":"14"},{"size":4905,"mtime":1634133465128,"results":"19","hashOfConfig":"14"},{"size":6250,"mtime":1634125148245,"results":"20","hashOfConfig":"14"},{"size":2187,"mtime":1633961704691,"results":"21","hashOfConfig":"14"},{"size":4871,"mtime":1634132392075,"results":"22","hashOfConfig":"14"},{"size":2234,"mtime":1634129224686,"results":"23","hashOfConfig":"14"},{"size":4992,"mtime":1634129266284,"results":"24","hashOfConfig":"14"},{"size":332,"mtime":1634132941422,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"676ie6",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/reportWebVitals.js",[],["55","56"],"/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/index.jsx",[],"/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/pages/Home.jsx",[],"/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/Header.jsx",[],"/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/AsideNav.jsx",[],"/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/pages/UserInterface.jsx",[],"/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/Weight.jsx",["57","58"],"import * as d3 from 'd3'\nimport { useState, useEffect } from 'react'\n\nfunction Weight({ activitiesData }) {\n    const [SvgWeight, setSvgWeight] = useState()\n\n    useEffect(() => {\n        const SvgWeightCreation = () => {\n            const minKilo = d3.min(activitiesData, (d) => d.kilogram)\n            const maxKilo = d3.max(activitiesData, (d) => d.kilogram)\n            const max = d3.max(activitiesData, (d) => d.calories)\n\n            const x = d3\n                .scaleBand()\n                .domain(activitiesData.map((item) => item.day))\n                .range([0, 685])\n                .paddingInner(0.95)\n\n            const y = d3\n                .scaleLinear()\n                .domain([0, max + 50])\n                .range([140, 0])\n\n            const yKilo = d3\n                .scaleLinear()\n                .domain([minKilo - 1, maxKilo + 1])\n                .range([140, 0])\n\n            const svg = d3\n                .select('svg')\n                .attr('width', 825)\n                .attr('height', 320)\n                .attr('class', 'bg-gray-50')\n                .style('border-radius', '5px')\n\n            const graph = svg\n                .append('g')\n                .attr('width', 685)\n                .attr('height', 140)\n                .attr('transform', 'translate(50, 110)')\n\n            const groupeX = graph\n                .append('g')\n                .attr('transform', `translate(0, 140)`)\n\n            const groupeXmiddle = graph\n                .append('g')\n                .attr('transform', `translate(0, 70)`)\n\n            const groupeXtop = graph.append('g')\n\n            const groupeY = graph\n                .append('g')\n                .attr('transform', `translate(700, 0)`)\n\n            const groupKilo = graph\n                .append('g')\n                .attr('transform', `translate(-6, 0)`)\n                .attr('width', 685)\n                .attr('height', 140)\n\n            const groupCalories = graph\n                .append('g')\n                .attr('transform', `translate(6, 0)`)\n\n            const rectKilo = groupKilo\n                .selectAll('line')\n                .data(activitiesData)\n                .enter()\n                .append('line')\n                .attr('x1', function (d) {\n                    return x(d.day)\n                })\n                .attr('x2', function (d) {\n                    return x(d.day)\n                })\n                .attr('y2', '140')\n                .attr('y1', '140')\n                .attr('stroke', '#000')\n                .attr('stroke-width', '7px')\n                .attr('stroke-linecap', 'round')\n                .attr('class', 'overflow-hidden')\n                .transition()\n                .duration(600)\n                .attr('y2', function (d) {\n                    return 140 - yKilo(d.kilogram)\n                })\n\n            const rectCalories = groupCalories\n                .selectAll('line')\n                .data(activitiesData)\n                .enter()\n                .append('line')\n                .attr('fill', '#E60000')\n                .attr('x1', function (d) {\n                    return x(d.day)\n                })\n                .attr('x2', function (d) {\n                    return x(d.day)\n                })\n                .attr('y2', '140')\n                .attr('y1', '140')\n                .attr('stroke', '#E60000')\n                .attr('stroke-width', '7px')\n                .attr('stroke-linecap', 'round')\n                .attr('class', 'overflow-hidden')\n                .transition()\n                .duration(600)\n                .attr('y1', function (d) {\n                    return y(d.calories)\n                })\n\n            graph\n                .append('g')\n                .append('rect')\n                .attr('width', 730)\n                .attr('height', 5)\n                .attr('fill', '#FBFBFB')\n                .attr('transform', `translate(-20, 140)`)\n\n            let tickLabels = ['1', '2', '3', '4', '5', '6', '7']\n\n            const axeX = d3\n                .axisBottom(x)\n                .tickSize(0)\n                .tickFormat((d, i) => tickLabels[i])\n            const axeY = d3.axisRight(yKilo).tickSize(0).ticks(3)\n\n            groupeX.call(axeX).style('font-size', '14px')\n            groupeXtop.call(axeX)\n            groupeXmiddle.call(axeX)\n\n            groupeX\n                .select('.domain')\n                .attr('stroke', '#DEDEDE')\n                .attr('stroke-width', 1)\n\n            groupeXtop\n                .select('.domain')\n                .attr('stroke', '#DEDEDE')\n                .attr('stroke-width', 1)\n                .attr('stroke-dasharray', '2')\n\n            groupeXmiddle\n                .select('.domain')\n                .attr('stroke', '#DEDEDE')\n                .attr('stroke-width', 1)\n                .attr('stroke-dasharray', '2')\n\n            groupeX\n                .selectAll('.tick text')\n                .attr('transform', 'translate(0, 10)')\n                .attr('class', 'text-gray-500')\n\n            groupeXmiddle.selectAll('.tick text').attr('class', 'text-gray-50')\n            groupeXtop.selectAll('.tick text').attr('class', 'text-gray-50')\n\n            groupeY.call(axeY).style('font-size', '14px')\n\n            groupeY.select('.domain').attr('stroke-width', 0)\n            groupeY\n                .selectAll('.tick text')\n                .attr('transform', 'translate(20, 0)')\n                .attr('class', 'text-gray-500')\n        }\n\n        setSvgWeight(SvgWeightCreation)\n    }, [SvgWeight, activitiesData])\n\n    return (\n        <div className=\"bg-gray-50 rounded-md col-span-3 flex items-center justify-center\">\n            <svg>\n                <text x=\"32\" y=\"50\" fill=\"#20253A\" fontSize=\"15\">\n                    Activité quotidienne\n                </text>\n                <circle cx=\"520\" cy=\"44\" r=\"4\" fill=\"#20253A\" />\n                <text x=\"535\" y=\"50\" fill=\"#20253A\" fontSize=\"15\">\n                    Poids (kg)\n                </text>\n                <circle cx=\"620\" cy=\"44\" r=\"4\" fill=\"#E60000\" />\n                <text x=\"635\" y=\"50\" fill=\"#20253A\" fontSize=\"15\">\n                    Calories Brulées (kCal)\n                </text>\n            </svg>\n        </div>\n    )\n}\n\nexport default Weight\n","/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/KeyData.jsx",[],"/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/SessionDuration.jsx",["59","60","61"],"import * as d3 from 'd3'\nimport { useEffect, useState } from 'react'\n\nfunction SessionDuration(sessionData) {\n    const [SvgWeight, setSvgWeight] = useState()\n    let x = d3\n        .scaleLinear()\n        .domain(d3.extent(sessionData.sessionData, (d) => d.day))\n        .range([0, 250])\n\n    let y = d3\n        .scaleLinear()\n        .domain([0, d3.max(sessionData.sessionData, (d) => d.sessionLength)])\n        .range([130, 0])\n\n    //const Days = ['L', 'M', 'M', 'J', 'V', 'S', 'D']\n\n    useEffect(() => {\n        let valueLine = d3\n            .line()\n            .x(function (d) {\n                return x(d.day)\n            })\n            .y(function (d) {\n                return y(d.sessionLength)\n            })\n            .curve(d3.curveBundle)\n\n        const SvgWeightCreation = () => {\n            const svg = d3\n                .select('.session-box')\n                .attr('width', 250)\n                .attr('height', 250)\n                .attr('class', 'bg-red-600')\n                //.style('background', '#FF0000')\n                .style('border-radius', '5px')\n                .append('g')\n                .attr('transform', 'translate(0, 100)')\n                .append('path')\n                .attr('fill', 'none')\n                .attr('stroke', '#fff')\n                .attr('stroke-width', '2px')\n                .attr('stroke-dasharray', 250)\n                .attr('stroke-dashoffset', 250)\n                .attr('d', valueLine(sessionData.sessionData))\n                .transition()\n                .duration(600)\n                .attr('stroke-dasharray', 0)\n                .attr('stroke-dashoffset', 0)\n        }\n\n        // const groupX = SvgWeightCreation.append('g').attr(\n        //     'transform',\n        //     'translate(0, 210)'\n        // )\n\n        // const axeDays = d3.scaleOrdinal(Days)\n\n        // const axeX = d3.axisBottom(axeDays)\n\n        // groupX.call(axeX).style('fontSize', '14px')\n\n        setSvgWeight(SvgWeightCreation)\n    }, [])\n\n    return (\n        <>\n            <div className=\"relative rounded-md flex justify-center items-center bg-red-600\">\n                <svg className=\"session-box\">\n                    <text\n                        x=\"32\"\n                        y=\"50\"\n                        fill=\"#FFFFFF\"\n                        fontSize=\"15\"\n                        className=\"opacity-50\"\n                    >\n                        Durée moyenne des\n                    </text>\n                    <text\n                        x=\"32\"\n                        y=\"80\"\n                        fill=\"#FFFFFF\"\n                        fontSize=\"15\"\n                        className=\"opacity-50\"\n                    >\n                        sessions\n                    </text>\n                    <text\n                        x=\"21\"\n                        y=\"225\"\n                        fill=\"#FFFFFF\"\n                        fontSize=\"12\"\n                        className=\"opacity-50\"\n                    >\n                        L\n                    </text>\n                    <text\n                        x=\"55\"\n                        y=\"225\"\n                        fill=\"#FFFFFF\"\n                        fontSize=\"12\"\n                        className=\"opacity-50\"\n                    >\n                        M\n                    </text>\n                    <text\n                        x=\"89\"\n                        y=\"225\"\n                        fill=\"#FFFFFF\"\n                        fontSize=\"12\"\n                        className=\"opacity-50\"\n                    >\n                        M\n                    </text>\n                    <text\n                        x=\"123\"\n                        y=\"225\"\n                        fill=\"#FFFFFF\"\n                        fontSize=\"12\"\n                        className=\"opacity-50\"\n                    >\n                        J\n                    </text>\n                    <text\n                        x=\"157\"\n                        y=\"225\"\n                        fill=\"#FFFFFF\"\n                        fontSize=\"12\"\n                        className=\"opacity-50\"\n                    >\n                        V\n                    </text>\n                    <text\n                        x=\"191\"\n                        y=\"225\"\n                        fill=\"#FFFFFF\"\n                        fontSize=\"12\"\n                        className=\"opacity-50\"\n                    >\n                        S\n                    </text>\n                    <text\n                        x=\"225\"\n                        y=\"225\"\n                        fill=\"#FFFFFF\"\n                        fontSize=\"12\"\n                        className=\"opacity-50\"\n                    >\n                        D\n                    </text>\n                </svg>\n            </div>\n        </>\n    )\n}\n\nexport default SessionDuration\n","/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/Score.jsx",["62","63"],"import * as d3 from 'd3'\nimport { useEffect, useState } from 'react'\n\nfunction Score(userScore) {\n    const [SvgWeight, setSvgWeight] = useState()\n\n    useEffect(() => {\n        const SvgWeightCreation = () => {\n            console.log(userScore.userScore)\n            const svg = d3\n                .select('.score-box')\n                .attr('width', 250)\n                .attr('height', 250)\n                .attr('class', 'bg-gray-50')\n                .style('border-radius', '5px')\n\n            const arc = d3\n                .arc()\n                .innerRadius(82)\n                .outerRadius(92)\n                .startAngle(0)\n                .endAngle(-Math.PI * 2 * userScore.userScore)\n                .cornerRadius(5)\n\n            svg.append('path')\n                .attr('class', 'arc')\n                .attr('fill', 'red')\n                .attr('transform', 'translate(125, 125)')\n                .attr('d', arc)\n                .transition()\n                .duration(600)\n        }\n\n        setSvgWeight(SvgWeightCreation)\n    }, [])\n    return (\n        <div className=\"rounded-md flex items-center justify-center bg-gray-50\">\n            <svg className=\"score-box\">\n                <circle cx=\"125\" cy=\"125\" r=\"87\" fill=\"white\"></circle>\n                <text x=\"32\" y=\"35\" fill=\"#20253A\" fontSize=\"15\">\n                    Score\n                </text>\n                <text\n                    x=\"109\"\n                    y=\"100\"\n                    fill=\"#20253A\"\n                    fontSize=\"19\"\n                    fontWeight=\"bold\"\n                >\n                    {userScore.userScore * 100}%\n                </text>\n                <text\n                    x=\"102\"\n                    y=\"130\"\n                    fill=\"#20253A\"\n                    fontSize=\"16\"\n                    className=\"opacity-50\"\n                >\n                    de votre\n                </text>\n                <text\n                    x=\"105\"\n                    y=\"160\"\n                    fill=\"#20253A\"\n                    fontSize=\"16\"\n                    className=\"opacity-50\"\n                >\n                    objectif\n                </text>\n            </svg>\n        </div>\n    )\n}\n\nexport default Score\n","/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/Radar.jsx",["64","65"],"import * as d3 from 'd3'\nimport { useEffect, useState } from 'react'\n\nfunction Radar(radarData) {\n    const [SvgWeight, setSvgWeight] = useState()\n\n    useEffect(() => {\n        const cardio = radarData.radarData.data[0].value\n        const energy = radarData.radarData.data[1].value\n        const endurance = radarData.radarData.data[2].value\n        const strength = radarData.radarData.data[3].value\n        const speed = radarData.radarData.data[4].value\n        const intensity = radarData.radarData.data[5].value\n\n        const maxValue = [\n            cardio,\n            energy,\n            endurance,\n            strength,\n            speed,\n            intensity,\n        ].sort(function (a, b) {\n            return b - a\n        })\n\n        function resizeValue(size) {\n            return (85 * size) / (maxValue[0] + 10)\n        }\n\n        const cardioCoord = {\n            axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(cardio),\n            axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(cardio),\n        }\n\n        const energyCoord = {\n            axeX: 125 - Math.sin(Math.PI / 3) * resizeValue(energy),\n            axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(energy),\n        }\n        const enduranceCoord = {\n            axeX: 125,\n            axeY: 130 + resizeValue(endurance),\n        }\n        const strengthCoord = {\n            axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(strength),\n            axeY: 130 + Math.cos(Math.PI / 3) * resizeValue(strength),\n        }\n        const speedCoord = {\n            axeX: 125 + Math.sin(Math.PI / 3) * resizeValue(speed),\n            axeY: 130 - Math.cos(Math.PI / 3) * resizeValue(speed),\n        }\n        const intensityCoord = {\n            axeX: 125,\n            axeY: 130 - resizeValue(intensity),\n        }\n\n        function newHexagon(size) {\n            return `M125 ${130 - size}, ${125 + Math.sin(Math.PI / 3) * size} ${\n                130 - Math.cos(Math.PI / 3) * size\n            }, ${125 + Math.sin(Math.PI / 3) * size} ${\n                130 + Math.cos(Math.PI / 3) * size\n            }, 125 ${130 + size}, ${125 - Math.sin(Math.PI / 3) * size} ${\n                130 + Math.cos(Math.PI / 3) * size\n            }, ${125 - Math.sin(Math.PI / 3) * size} ${\n                130 - Math.cos(Math.PI / 3) * size\n            }, 125 ${130 - size}`\n        }\n\n        const dPath = `M${intensityCoord.axeX} ${intensityCoord.axeY}, ${speedCoord.axeX} ${speedCoord.axeY}, ${strengthCoord.axeX} ${strengthCoord.axeY}, ${enduranceCoord.axeX} ${enduranceCoord.axeY},${energyCoord.axeX} ${energyCoord.axeY}, ${cardioCoord.axeX} ${cardioCoord.axeY}Z`\n\n        const SvgWeightCreation = d3\n            .select('.radar-box')\n            .attr('width', 250)\n            .attr('height', 250)\n            .style('background', '#000')\n            .style('border-radius', '5px')\n\n        SvgWeightCreation.append('g')\n            .append('path')\n            .attr('fill', 'none')\n            .attr('stroke', '#fff')\n            .attr('d', newHexagon(85))\n\n        SvgWeightCreation.append('g')\n            .append('path')\n            .attr('fill', 'none')\n            .attr('stroke', '#fff')\n            .attr('d', newHexagon(65))\n\n        SvgWeightCreation.append('g')\n            .append('path')\n            .attr('fill', 'none')\n            .attr('stroke', '#fff')\n            .attr('d', newHexagon(45))\n\n        SvgWeightCreation.append('g')\n            .append('path')\n            .attr('fill', 'none')\n            .attr('stroke', '#fff')\n            .attr('d', newHexagon(25))\n\n        SvgWeightCreation.append('g')\n            .append('path')\n            .attr('fill', 'none')\n            .attr('stroke', '#fff')\n            .attr('d', newHexagon(12))\n\n        SvgWeightCreation.append('g')\n            //.attr('transform', 'translate(0, 100)')\n            .append('path')\n            .attr('fill', '#FF0101')\n            .attr('d', newHexagon(0))\n            .transition()\n            .duration(600)\n            .attr('d', dPath)\n            .attr('class', 'opacity-70')\n\n        setSvgWeight(SvgWeightCreation)\n    }, [])\n    return (\n        <div className=\"rounded-md flex items-center justify-center bg-black\">\n            <svg className=\"radar-box\">\n                <text x=\"100\" y=\"30\" fill=\"#fff\" fontSize=\"12\">\n                    Intensité\n                </text>\n                <text x=\"210\" y=\"90\" fill=\"#fff\" fontSize=\"12\">\n                    Vitesse\n                </text>\n                <text x=\"210\" y=\"170\" fill=\"#fff\" fontSize=\"12\">\n                    Force\n                </text>\n                <text x=\"100\" y=\"230\" fill=\"#fff\" fontSize=\"12\">\n                    Endurance\n                </text>\n                <text x=\"5\" y=\"170\" fill=\"#fff\" fontSize=\"12\">\n                    Energie\n                </text>\n                <text x=\"5\" y=\"90\" fill=\"#fff\" fontSize=\"12\">\n                    Cardio\n                </text>\n            </svg>\n        </div>\n    )\n}\n\nexport default Radar\n","/Users/florent/Documents/Websites/FlorentMANUEL_12_04102021/src/components/Error.jsx",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":66,"column":19,"nodeType":"72","messageId":"73","endLine":66,"endColumn":27},{"ruleId":"70","severity":1,"message":"74","line":89,"column":19,"nodeType":"72","messageId":"73","endLine":89,"endColumn":31},{"ruleId":"70","severity":1,"message":"75","line":5,"column":12,"nodeType":"72","messageId":"73","endLine":5,"endColumn":21},{"ruleId":"70","severity":1,"message":"76","line":30,"column":19,"nodeType":"72","messageId":"73","endLine":30,"endColumn":22},{"ruleId":"77","severity":1,"message":"78","line":64,"column":8,"nodeType":"79","endLine":64,"endColumn":10,"suggestions":"80"},{"ruleId":"70","severity":1,"message":"75","line":5,"column":12,"nodeType":"72","messageId":"73","endLine":5,"endColumn":21},{"ruleId":"77","severity":1,"message":"81","line":35,"column":8,"nodeType":"79","endLine":35,"endColumn":10,"suggestions":"82"},{"ruleId":"70","severity":1,"message":"75","line":5,"column":12,"nodeType":"72","messageId":"73","endLine":5,"endColumn":21},{"ruleId":"77","severity":1,"message":"83","line":118,"column":8,"nodeType":"79","endLine":118,"endColumn":10,"suggestions":"84"},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'rectKilo' is assigned a value but never used.","Identifier","unusedVar","'rectCalories' is assigned a value but never used.","'SvgWeight' is assigned a value but never used.","'svg' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'sessionData.sessionData', 'x', and 'y'. Either include them or remove the dependency array.","ArrayExpression",["87"],"React Hook useEffect has a missing dependency: 'userScore.userScore'. Either include it or remove the dependency array.",["88"],"React Hook useEffect has a missing dependency: 'radarData.radarData.data'. Either include it or remove the dependency array.",["89"],"no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},"Update the dependencies array to be: [sessionData.sessionData, x, y]",{"range":"96","text":"97"},"Update the dependencies array to be: [userScore.userScore]",{"range":"98","text":"99"},"Update the dependencies array to be: [radarData.radarData.data]",{"range":"100","text":"101"},[1981,1983],"[sessionData.sessionData, x, y]",[1046,1048],"[userScore.userScore]",[4095,4097],"[radarData.radarData.data]"]